// @generated by protobuf-ts 2.7.0
// @generated from protobuf file "youtube.proto" (package "youtube", syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message youtube.VisitorData
 */
export interface VisitorData {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: int32 timestamp = 5;
     */
    timestamp: number;
}
/**
 * @generated from protobuf message youtube.ChannelAnalytics
 */
export interface ChannelAnalytics {
    /**
     * @generated from protobuf field: youtube.ChannelAnalytics.Params params = 32;
     */
    params?: ChannelAnalytics_Params;
}
/**
 * @generated from protobuf message youtube.ChannelAnalytics.Params
 */
export interface ChannelAnalytics_Params {
    /**
     * @generated from protobuf field: string channel_id = 1001;
     */
    channelId: string;
}
/**
 * @generated from protobuf message youtube.InnertubePayload
 */
export interface InnertubePayload {
    /**
     * @generated from protobuf field: youtube.InnertubePayload.Context context = 1;
     */
    context?: InnertubePayload_Context;
    /**
     * This can be either a target id or a video id.
     *
     * @generated from protobuf field: optional string target = 2;
     */
    target?: string;
    /**
     * @generated from protobuf field: optional youtube.InnertubePayload.VideoSettings video_settings = 20;
     */
    videoSettings?: InnertubePayload_VideoSettings;
}
/**
 * @generated from protobuf message youtube.InnertubePayload.Context
 */
export interface InnertubePayload_Context {
    /**
     * @generated from protobuf field: youtube.InnertubePayload.Context.Client client = 1;
     */
    client?: InnertubePayload_Context_Client;
}
/**
 * @generated from protobuf message youtube.InnertubePayload.Context.Client
 */
export interface InnertubePayload_Context_Client {
    /**
     * @generated from protobuf field: int32 unkparam = 16;
     */
    unkparam: number;
    /**
     * @generated from protobuf field: string client_version = 17;
     */
    clientVersion: string;
    /**
     * @generated from protobuf field: string client_name = 18;
     */
    clientName: string;
}
/**
 * Note: I'm not entirely sure this message is only used for video settings
 *
 * @generated from protobuf message youtube.InnertubePayload.VideoSettings
 */
export interface InnertubePayload_VideoSettings {
    /**
     * @generated from protobuf field: int32 type = 1;
     */
    type: number; // is this something else?
    /**
     * @generated from protobuf field: youtube.InnertubePayload.VideoSettings.Thumbnail thumbnail = 3;
     */
    thumbnail?: InnertubePayload_VideoSettings_Thumbnail;
}
/**
 * @generated from protobuf message youtube.InnertubePayload.VideoSettings.Thumbnail
 */
export interface InnertubePayload_VideoSettings_Thumbnail {
    /**
     * @generated from protobuf field: bytes image_data = 1;
     */
    imageData: Uint8Array;
}
/**
 * @generated from protobuf message youtube.SoundInfoParams
 */
export interface SoundInfoParams {
    /**
     * @generated from protobuf field: youtube.SoundInfoParams.Sound sound = 94;
     */
    sound?: SoundInfoParams_Sound;
}
/**
 * @generated from protobuf message youtube.SoundInfoParams.Sound
 */
export interface SoundInfoParams_Sound {
    /**
     * @generated from protobuf field: youtube.SoundInfoParams.Sound.Params params = 1;
     */
    params?: SoundInfoParams_Sound_Params;
}
/**
 * @generated from protobuf message youtube.SoundInfoParams.Sound.Params
 */
export interface SoundInfoParams_Sound_Params {
    /**
     * @generated from protobuf field: youtube.SoundInfoParams.Sound.Params.Ids ids = 2;
     */
    ids?: SoundInfoParams_Sound_Params_Ids;
}
/**
 * @generated from protobuf message youtube.SoundInfoParams.Sound.Params.Ids
 */
export interface SoundInfoParams_Sound_Params_Ids {
    /**
     * @generated from protobuf field: string id_1 = 1;
     */
    id1: string;
    /**
     * @generated from protobuf field: string id_2 = 2;
     */
    id2: string;
    /**
     * @generated from protobuf field: string id_3 = 3;
     */
    id3: string;
}
/**
 * @generated from protobuf message youtube.NotificationPreferences
 */
export interface NotificationPreferences {
    /**
     * @generated from protobuf field: string channel_id = 1;
     */
    channelId: string;
    /**
     * @generated from protobuf field: youtube.NotificationPreferences.Preference pref_id = 2;
     */
    prefId?: NotificationPreferences_Preference;
    /**
     * @generated from protobuf field: optional int32 number_0 = 3;
     */
    number0?: number;
    /**
     * @generated from protobuf field: optional int32 number_1 = 4;
     */
    number1?: number;
}
/**
 * @generated from protobuf message youtube.NotificationPreferences.Preference
 */
export interface NotificationPreferences_Preference {
    /**
     * @generated from protobuf field: int32 index = 1;
     */
    index: number;
}
/**
 * @generated from protobuf message youtube.LiveMessageParams
 */
export interface LiveMessageParams {
    /**
     * @generated from protobuf field: youtube.LiveMessageParams.Params params = 1;
     */
    params?: LiveMessageParams_Params;
    /**
     * @generated from protobuf field: optional int32 number_0 = 2;
     */
    number0?: number;
    /**
     * @generated from protobuf field: optional int32 number_1 = 3;
     */
    number1?: number;
}
/**
 * @generated from protobuf message youtube.LiveMessageParams.Params
 */
export interface LiveMessageParams_Params {
    /**
     * @generated from protobuf field: youtube.LiveMessageParams.Params.Ids ids = 5;
     */
    ids?: LiveMessageParams_Params_Ids;
}
/**
 * @generated from protobuf message youtube.LiveMessageParams.Params.Ids
 */
export interface LiveMessageParams_Params_Ids {
    /**
     * @generated from protobuf field: string channel_id = 1;
     */
    channelId: string;
    /**
     * @generated from protobuf field: string video_id = 2;
     */
    videoId: string;
}
/**
 * @generated from protobuf message youtube.GetCommentsSectionParams
 */
export interface GetCommentsSectionParams {
    /**
     * @generated from protobuf field: youtube.GetCommentsSectionParams.Context ctx = 2;
     */
    ctx?: GetCommentsSectionParams_Context;
    /**
     * @generated from protobuf field: int32 unk_param = 3;
     */
    unkParam: number;
    /**
     * @generated from protobuf field: youtube.GetCommentsSectionParams.Params params = 6;
     */
    params?: GetCommentsSectionParams_Params;
}
/**
 * @generated from protobuf message youtube.GetCommentsSectionParams.Context
 */
export interface GetCommentsSectionParams_Context {
    /**
     * @generated from protobuf field: string video_id = 2;
     */
    videoId: string;
}
/**
 * @generated from protobuf message youtube.GetCommentsSectionParams.Params
 */
export interface GetCommentsSectionParams_Params {
    /**
     * @generated from protobuf field: optional string unk_token = 1;
     */
    unkToken?: string;
    /**
     * @generated from protobuf field: optional youtube.GetCommentsSectionParams.Params.Options opts = 4;
     */
    opts?: GetCommentsSectionParams_Params_Options;
    /**
     * @generated from protobuf field: optional youtube.GetCommentsSectionParams.Params.RepliesOptions replies_opts = 3;
     */
    repliesOpts?: GetCommentsSectionParams_Params_RepliesOptions;
    /**
     * @generated from protobuf field: optional int32 page = 5;
     */
    page?: number;
    /**
     * @generated from protobuf field: string target = 8;
     */
    target: string;
}
/**
 * @generated from protobuf message youtube.GetCommentsSectionParams.Params.Options
 */
export interface GetCommentsSectionParams_Params_Options {
    /**
     * @generated from protobuf field: string video_id = 4;
     */
    videoId: string;
    /**
     * @generated from protobuf field: int32 sort_by = 6;
     */
    sortBy: number;
    /**
     * @generated from protobuf field: int32 type = 15;
     */
    type: number;
}
/**
 * @generated from protobuf message youtube.GetCommentsSectionParams.Params.RepliesOptions
 */
export interface GetCommentsSectionParams_Params_RepliesOptions {
    /**
     * @generated from protobuf field: string comment_id = 2;
     */
    commentId: string;
    /**
     * @generated from protobuf field: youtube.GetCommentsSectionParams.Params.RepliesOptions.UnkOpts unkopts = 4;
     */
    unkopts?: GetCommentsSectionParams_Params_RepliesOptions_UnkOpts;
    /**
     * @generated from protobuf field: optional string channel_id = 5;
     */
    channelId?: string;
    /**
     * @generated from protobuf field: string video_id = 6;
     */
    videoId: string;
    /**
     * @generated from protobuf field: int32 unk_param_1 = 8;
     */
    unkParam1: number;
    /**
     * @generated from protobuf field: int32 unk_param_2 = 9;
     */
    unkParam2: number;
}
/**
 * @generated from protobuf message youtube.GetCommentsSectionParams.Params.RepliesOptions.UnkOpts
 */
export interface GetCommentsSectionParams_Params_RepliesOptions_UnkOpts {
    /**
     * @generated from protobuf field: int32 unk_param = 1;
     */
    unkParam: number;
}
/**
 * @generated from protobuf message youtube.CreateCommentParams
 */
export interface CreateCommentParams {
    /**
     * @generated from protobuf field: string video_id = 2;
     */
    videoId: string;
    /**
     * @generated from protobuf field: youtube.CreateCommentParams.Params params = 5;
     */
    params?: CreateCommentParams_Params;
    /**
     * @generated from protobuf field: int32 number = 10;
     */
    number: number;
}
/**
 * @generated from protobuf message youtube.CreateCommentParams.Params
 */
export interface CreateCommentParams_Params {
    /**
     * @generated from protobuf field: int32 index = 1;
     */
    index: number;
}
/**
 * @generated from protobuf message youtube.CreateCommentReplyParams
 */
export interface CreateCommentReplyParams {
    /**
     * @generated from protobuf field: string video_id = 2;
     */
    videoId: string;
    /**
     * @generated from protobuf field: string comment_id = 4;
     */
    commentId: string;
    /**
     * @generated from protobuf field: youtube.CreateCommentReplyParams.UnknownParams params = 5;
     */
    params?: CreateCommentReplyParams_UnknownParams;
    /**
     * @generated from protobuf field: optional int32 unk_num = 10;
     */
    unkNum?: number;
}
/**
 * @generated from protobuf message youtube.CreateCommentReplyParams.UnknownParams
 */
export interface CreateCommentReplyParams_UnknownParams {
    /**
     * @generated from protobuf field: int32 unk_num = 1;
     */
    unkNum: number;
}
/**
 * @generated from protobuf message youtube.PeformCommentActionParams
 */
export interface PeformCommentActionParams {
    /**
     * @generated from protobuf field: int32 type = 1;
     */
    type: number;
    /**
     * @generated from protobuf field: string comment_id = 3;
     */
    commentId: string;
    /**
     * @generated from protobuf field: string video_id = 5;
     */
    videoId: string;
    /**
     * @generated from protobuf field: optional int32 unk_num = 2;
     */
    unkNum?: number;
    /**
     * @generated from protobuf field: optional string channel_id = 23;
     */
    channelId?: string;
    /**
     * @generated from protobuf field: optional youtube.PeformCommentActionParams.TranslateCommentParams translate_comment_params = 31;
     */
    translateCommentParams?: PeformCommentActionParams_TranslateCommentParams;
}
/**
 * @generated from protobuf message youtube.PeformCommentActionParams.TranslateCommentParams
 */
export interface PeformCommentActionParams_TranslateCommentParams {
    /**
     * @generated from protobuf field: youtube.PeformCommentActionParams.TranslateCommentParams.Params params = 3;
     */
    params?: PeformCommentActionParams_TranslateCommentParams_Params;
    /**
     * @generated from protobuf field: string comment_id = 2;
     */
    commentId: string;
    /**
     * @generated from protobuf field: string target_language = 4;
     */
    targetLanguage: string;
}
/**
 * @generated from protobuf message youtube.PeformCommentActionParams.TranslateCommentParams.Params
 */
export interface PeformCommentActionParams_TranslateCommentParams_Params {
    /**
     * @generated from protobuf field: youtube.PeformCommentActionParams.TranslateCommentParams.Params.Comment comment = 1;
     */
    comment?: PeformCommentActionParams_TranslateCommentParams_Params_Comment;
}
/**
 * @generated from protobuf message youtube.PeformCommentActionParams.TranslateCommentParams.Params.Comment
 */
export interface PeformCommentActionParams_TranslateCommentParams_Params_Comment {
    /**
     * @generated from protobuf field: string text = 1;
     */
    text: string;
}
/**
 * @generated from protobuf message youtube.MusicSearchFilter
 */
export interface MusicSearchFilter {
    /**
     * @generated from protobuf field: optional youtube.MusicSearchFilter.Filters filters = 2;
     */
    filters?: MusicSearchFilter_Filters;
}
/**
 * @generated from protobuf message youtube.MusicSearchFilter.Filters
 */
export interface MusicSearchFilter_Filters {
    /**
     * @generated from protobuf field: optional youtube.MusicSearchFilter.Filters.Type type = 17;
     */
    type?: MusicSearchFilter_Filters_Type;
}
/**
 * @generated from protobuf message youtube.MusicSearchFilter.Filters.Type
 */
export interface MusicSearchFilter_Filters_Type {
    /**
     * TODO: protoc doesn't allow zero index: optional int32 all = 0;
     *
     * @generated from protobuf field: optional int32 song = 1;
     */
    song?: number;
    /**
     * @generated from protobuf field: optional int32 video = 2;
     */
    video?: number;
    /**
     * @generated from protobuf field: optional int32 album = 3;
     */
    album?: number;
    /**
     * @generated from protobuf field: optional int32 artist = 4;
     */
    artist?: number;
    /**
     * @generated from protobuf field: optional int32 playlist = 5;
     */
    playlist?: number;
}
/**
 * @generated from protobuf message youtube.SearchFilter
 */
export interface SearchFilter {
    /**
     * @generated from protobuf field: optional int32 sort_by = 1;
     */
    sortBy?: number;
    /**
     * @generated from protobuf field: optional int32 no_filter = 19;
     */
    noFilter?: number;
    /**
     * @generated from protobuf field: optional youtube.SearchFilter.Filters filters = 2;
     */
    filters?: SearchFilter_Filters;
}
/**
 * @generated from protobuf message youtube.SearchFilter.Filters
 */
export interface SearchFilter_Filters {
    /**
     * @generated from protobuf field: optional int32 upload_date = 1;
     */
    uploadDate?: number;
    /**
     * @generated from protobuf field: optional int32 type = 2;
     */
    type?: number;
    /**
     * @generated from protobuf field: optional int32 duration = 3;
     */
    duration?: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class VisitorData$Type extends MessageType<VisitorData> {
    constructor() {
        super("youtube.VisitorData", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "timestamp", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<VisitorData>): VisitorData {
        const message = { id: "", timestamp: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VisitorData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VisitorData): VisitorData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* int32 timestamp */ 5:
                    message.timestamp = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VisitorData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* int32 timestamp = 5; */
        if (message.timestamp !== 0)
            writer.tag(5, WireType.Varint).int32(message.timestamp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message youtube.VisitorData
 */
export const VisitorData = new VisitorData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannelAnalytics$Type extends MessageType<ChannelAnalytics> {
    constructor() {
        super("youtube.ChannelAnalytics", [
            { no: 32, name: "params", kind: "message", T: () => ChannelAnalytics_Params }
        ]);
    }
    create(value?: PartialMessage<ChannelAnalytics>): ChannelAnalytics {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChannelAnalytics>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChannelAnalytics): ChannelAnalytics {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* youtube.ChannelAnalytics.Params params */ 32:
                    message.params = ChannelAnalytics_Params.internalBinaryRead(reader, reader.uint32(), options, message.params);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChannelAnalytics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* youtube.ChannelAnalytics.Params params = 32; */
        if (message.params)
            ChannelAnalytics_Params.internalBinaryWrite(message.params, writer.tag(32, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message youtube.ChannelAnalytics
 */
export const ChannelAnalytics = new ChannelAnalytics$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannelAnalytics_Params$Type extends MessageType<ChannelAnalytics_Params> {
    constructor() {
        super("youtube.ChannelAnalytics.Params", [
            { no: 1001, name: "channel_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChannelAnalytics_Params>): ChannelAnalytics_Params {
        const message = { channelId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChannelAnalytics_Params>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChannelAnalytics_Params): ChannelAnalytics_Params {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string channel_id */ 1001:
                    message.channelId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChannelAnalytics_Params, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string channel_id = 1001; */
        if (message.channelId !== "")
            writer.tag(1001, WireType.LengthDelimited).string(message.channelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message youtube.ChannelAnalytics.Params
 */
export const ChannelAnalytics_Params = new ChannelAnalytics_Params$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InnertubePayload$Type extends MessageType<InnertubePayload> {
    constructor() {
        super("youtube.InnertubePayload", [
            { no: 1, name: "context", kind: "message", T: () => InnertubePayload_Context },
            { no: 2, name: "target", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 20, name: "video_settings", kind: "message", T: () => InnertubePayload_VideoSettings }
        ]);
    }
    create(value?: PartialMessage<InnertubePayload>): InnertubePayload {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InnertubePayload>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InnertubePayload): InnertubePayload {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* youtube.InnertubePayload.Context context */ 1:
                    message.context = InnertubePayload_Context.internalBinaryRead(reader, reader.uint32(), options, message.context);
                    break;
                case /* optional string target */ 2:
                    message.target = reader.string();
                    break;
                case /* optional youtube.InnertubePayload.VideoSettings video_settings */ 20:
                    message.videoSettings = InnertubePayload_VideoSettings.internalBinaryRead(reader, reader.uint32(), options, message.videoSettings);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InnertubePayload, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* youtube.InnertubePayload.Context context = 1; */
        if (message.context)
            InnertubePayload_Context.internalBinaryWrite(message.context, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional string target = 2; */
        if (message.target !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.target);
        /* optional youtube.InnertubePayload.VideoSettings video_settings = 20; */
        if (message.videoSettings)
            InnertubePayload_VideoSettings.internalBinaryWrite(message.videoSettings, writer.tag(20, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message youtube.InnertubePayload
 */
export const InnertubePayload = new InnertubePayload$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InnertubePayload_Context$Type extends MessageType<InnertubePayload_Context> {
    constructor() {
        super("youtube.InnertubePayload.Context", [
            { no: 1, name: "client", kind: "message", T: () => InnertubePayload_Context_Client }
        ]);
    }
    create(value?: PartialMessage<InnertubePayload_Context>): InnertubePayload_Context {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InnertubePayload_Context>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InnertubePayload_Context): InnertubePayload_Context {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* youtube.InnertubePayload.Context.Client client */ 1:
                    message.client = InnertubePayload_Context_Client.internalBinaryRead(reader, reader.uint32(), options, message.client);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InnertubePayload_Context, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* youtube.InnertubePayload.Context.Client client = 1; */
        if (message.client)
            InnertubePayload_Context_Client.internalBinaryWrite(message.client, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message youtube.InnertubePayload.Context
 */
export const InnertubePayload_Context = new InnertubePayload_Context$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InnertubePayload_Context_Client$Type extends MessageType<InnertubePayload_Context_Client> {
    constructor() {
        super("youtube.InnertubePayload.Context.Client", [
            { no: 16, name: "unkparam", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 17, name: "client_version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 18, name: "client_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<InnertubePayload_Context_Client>): InnertubePayload_Context_Client {
        const message = { unkparam: 0, clientVersion: "", clientName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InnertubePayload_Context_Client>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InnertubePayload_Context_Client): InnertubePayload_Context_Client {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 unkparam */ 16:
                    message.unkparam = reader.int32();
                    break;
                case /* string client_version */ 17:
                    message.clientVersion = reader.string();
                    break;
                case /* string client_name */ 18:
                    message.clientName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InnertubePayload_Context_Client, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 unkparam = 16; */
        if (message.unkparam !== 0)
            writer.tag(16, WireType.Varint).int32(message.unkparam);
        /* string client_version = 17; */
        if (message.clientVersion !== "")
            writer.tag(17, WireType.LengthDelimited).string(message.clientVersion);
        /* string client_name = 18; */
        if (message.clientName !== "")
            writer.tag(18, WireType.LengthDelimited).string(message.clientName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message youtube.InnertubePayload.Context.Client
 */
export const InnertubePayload_Context_Client = new InnertubePayload_Context_Client$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InnertubePayload_VideoSettings$Type extends MessageType<InnertubePayload_VideoSettings> {
    constructor() {
        super("youtube.InnertubePayload.VideoSettings", [
            { no: 1, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "thumbnail", kind: "message", T: () => InnertubePayload_VideoSettings_Thumbnail }
        ]);
    }
    create(value?: PartialMessage<InnertubePayload_VideoSettings>): InnertubePayload_VideoSettings {
        const message = { type: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InnertubePayload_VideoSettings>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InnertubePayload_VideoSettings): InnertubePayload_VideoSettings {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 type */ 1:
                    message.type = reader.int32();
                    break;
                case /* youtube.InnertubePayload.VideoSettings.Thumbnail thumbnail */ 3:
                    message.thumbnail = InnertubePayload_VideoSettings_Thumbnail.internalBinaryRead(reader, reader.uint32(), options, message.thumbnail);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InnertubePayload_VideoSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* youtube.InnertubePayload.VideoSettings.Thumbnail thumbnail = 3; */
        if (message.thumbnail)
            InnertubePayload_VideoSettings_Thumbnail.internalBinaryWrite(message.thumbnail, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message youtube.InnertubePayload.VideoSettings
 */
export const InnertubePayload_VideoSettings = new InnertubePayload_VideoSettings$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InnertubePayload_VideoSettings_Thumbnail$Type extends MessageType<InnertubePayload_VideoSettings_Thumbnail> {
    constructor() {
        super("youtube.InnertubePayload.VideoSettings.Thumbnail", [
            { no: 1, name: "image_data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<InnertubePayload_VideoSettings_Thumbnail>): InnertubePayload_VideoSettings_Thumbnail {
        const message = { imageData: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InnertubePayload_VideoSettings_Thumbnail>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InnertubePayload_VideoSettings_Thumbnail): InnertubePayload_VideoSettings_Thumbnail {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes image_data */ 1:
                    message.imageData = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InnertubePayload_VideoSettings_Thumbnail, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes image_data = 1; */
        if (message.imageData.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.imageData);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message youtube.InnertubePayload.VideoSettings.Thumbnail
 */
export const InnertubePayload_VideoSettings_Thumbnail = new InnertubePayload_VideoSettings_Thumbnail$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SoundInfoParams$Type extends MessageType<SoundInfoParams> {
    constructor() {
        super("youtube.SoundInfoParams", [
            { no: 94, name: "sound", kind: "message", T: () => SoundInfoParams_Sound }
        ]);
    }
    create(value?: PartialMessage<SoundInfoParams>): SoundInfoParams {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SoundInfoParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SoundInfoParams): SoundInfoParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* youtube.SoundInfoParams.Sound sound */ 94:
                    message.sound = SoundInfoParams_Sound.internalBinaryRead(reader, reader.uint32(), options, message.sound);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SoundInfoParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* youtube.SoundInfoParams.Sound sound = 94; */
        if (message.sound)
            SoundInfoParams_Sound.internalBinaryWrite(message.sound, writer.tag(94, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message youtube.SoundInfoParams
 */
export const SoundInfoParams = new SoundInfoParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SoundInfoParams_Sound$Type extends MessageType<SoundInfoParams_Sound> {
    constructor() {
        super("youtube.SoundInfoParams.Sound", [
            { no: 1, name: "params", kind: "message", T: () => SoundInfoParams_Sound_Params }
        ]);
    }
    create(value?: PartialMessage<SoundInfoParams_Sound>): SoundInfoParams_Sound {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SoundInfoParams_Sound>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SoundInfoParams_Sound): SoundInfoParams_Sound {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* youtube.SoundInfoParams.Sound.Params params */ 1:
                    message.params = SoundInfoParams_Sound_Params.internalBinaryRead(reader, reader.uint32(), options, message.params);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SoundInfoParams_Sound, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* youtube.SoundInfoParams.Sound.Params params = 1; */
        if (message.params)
            SoundInfoParams_Sound_Params.internalBinaryWrite(message.params, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message youtube.SoundInfoParams.Sound
 */
export const SoundInfoParams_Sound = new SoundInfoParams_Sound$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SoundInfoParams_Sound_Params$Type extends MessageType<SoundInfoParams_Sound_Params> {
    constructor() {
        super("youtube.SoundInfoParams.Sound.Params", [
            { no: 2, name: "ids", kind: "message", T: () => SoundInfoParams_Sound_Params_Ids }
        ]);
    }
    create(value?: PartialMessage<SoundInfoParams_Sound_Params>): SoundInfoParams_Sound_Params {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SoundInfoParams_Sound_Params>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SoundInfoParams_Sound_Params): SoundInfoParams_Sound_Params {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* youtube.SoundInfoParams.Sound.Params.Ids ids */ 2:
                    message.ids = SoundInfoParams_Sound_Params_Ids.internalBinaryRead(reader, reader.uint32(), options, message.ids);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SoundInfoParams_Sound_Params, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* youtube.SoundInfoParams.Sound.Params.Ids ids = 2; */
        if (message.ids)
            SoundInfoParams_Sound_Params_Ids.internalBinaryWrite(message.ids, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message youtube.SoundInfoParams.Sound.Params
 */
export const SoundInfoParams_Sound_Params = new SoundInfoParams_Sound_Params$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SoundInfoParams_Sound_Params_Ids$Type extends MessageType<SoundInfoParams_Sound_Params_Ids> {
    constructor() {
        super("youtube.SoundInfoParams.Sound.Params.Ids", [
            { no: 1, name: "id_1", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "id_2", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "id_3", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SoundInfoParams_Sound_Params_Ids>): SoundInfoParams_Sound_Params_Ids {
        const message = { id1: "", id2: "", id3: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SoundInfoParams_Sound_Params_Ids>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SoundInfoParams_Sound_Params_Ids): SoundInfoParams_Sound_Params_Ids {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id_1 */ 1:
                    message.id1 = reader.string();
                    break;
                case /* string id_2 */ 2:
                    message.id2 = reader.string();
                    break;
                case /* string id_3 */ 3:
                    message.id3 = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SoundInfoParams_Sound_Params_Ids, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id_1 = 1; */
        if (message.id1 !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id1);
        /* string id_2 = 2; */
        if (message.id2 !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id2);
        /* string id_3 = 3; */
        if (message.id3 !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.id3);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message youtube.SoundInfoParams.Sound.Params.Ids
 */
export const SoundInfoParams_Sound_Params_Ids = new SoundInfoParams_Sound_Params_Ids$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NotificationPreferences$Type extends MessageType<NotificationPreferences> {
    constructor() {
        super("youtube.NotificationPreferences", [
            { no: 1, name: "channel_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "pref_id", kind: "message", T: () => NotificationPreferences_Preference },
            { no: 3, name: "number_0", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "number_1", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<NotificationPreferences>): NotificationPreferences {
        const message = { channelId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<NotificationPreferences>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NotificationPreferences): NotificationPreferences {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string channel_id */ 1:
                    message.channelId = reader.string();
                    break;
                case /* youtube.NotificationPreferences.Preference pref_id */ 2:
                    message.prefId = NotificationPreferences_Preference.internalBinaryRead(reader, reader.uint32(), options, message.prefId);
                    break;
                case /* optional int32 number_0 */ 3:
                    message.number0 = reader.int32();
                    break;
                case /* optional int32 number_1 */ 4:
                    message.number1 = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NotificationPreferences, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string channel_id = 1; */
        if (message.channelId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.channelId);
        /* youtube.NotificationPreferences.Preference pref_id = 2; */
        if (message.prefId)
            NotificationPreferences_Preference.internalBinaryWrite(message.prefId, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 number_0 = 3; */
        if (message.number0 !== undefined)
            writer.tag(3, WireType.Varint).int32(message.number0);
        /* optional int32 number_1 = 4; */
        if (message.number1 !== undefined)
            writer.tag(4, WireType.Varint).int32(message.number1);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message youtube.NotificationPreferences
 */
export const NotificationPreferences = new NotificationPreferences$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NotificationPreferences_Preference$Type extends MessageType<NotificationPreferences_Preference> {
    constructor() {
        super("youtube.NotificationPreferences.Preference", [
            { no: 1, name: "index", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<NotificationPreferences_Preference>): NotificationPreferences_Preference {
        const message = { index: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<NotificationPreferences_Preference>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NotificationPreferences_Preference): NotificationPreferences_Preference {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 index */ 1:
                    message.index = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NotificationPreferences_Preference, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 index = 1; */
        if (message.index !== 0)
            writer.tag(1, WireType.Varint).int32(message.index);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message youtube.NotificationPreferences.Preference
 */
export const NotificationPreferences_Preference = new NotificationPreferences_Preference$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LiveMessageParams$Type extends MessageType<LiveMessageParams> {
    constructor() {
        super("youtube.LiveMessageParams", [
            { no: 1, name: "params", kind: "message", T: () => LiveMessageParams_Params },
            { no: 2, name: "number_0", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "number_1", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<LiveMessageParams>): LiveMessageParams {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LiveMessageParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LiveMessageParams): LiveMessageParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* youtube.LiveMessageParams.Params params */ 1:
                    message.params = LiveMessageParams_Params.internalBinaryRead(reader, reader.uint32(), options, message.params);
                    break;
                case /* optional int32 number_0 */ 2:
                    message.number0 = reader.int32();
                    break;
                case /* optional int32 number_1 */ 3:
                    message.number1 = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LiveMessageParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* youtube.LiveMessageParams.Params params = 1; */
        if (message.params)
            LiveMessageParams_Params.internalBinaryWrite(message.params, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 number_0 = 2; */
        if (message.number0 !== undefined)
            writer.tag(2, WireType.Varint).int32(message.number0);
        /* optional int32 number_1 = 3; */
        if (message.number1 !== undefined)
            writer.tag(3, WireType.Varint).int32(message.number1);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message youtube.LiveMessageParams
 */
export const LiveMessageParams = new LiveMessageParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LiveMessageParams_Params$Type extends MessageType<LiveMessageParams_Params> {
    constructor() {
        super("youtube.LiveMessageParams.Params", [
            { no: 5, name: "ids", kind: "message", T: () => LiveMessageParams_Params_Ids }
        ]);
    }
    create(value?: PartialMessage<LiveMessageParams_Params>): LiveMessageParams_Params {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LiveMessageParams_Params>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LiveMessageParams_Params): LiveMessageParams_Params {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* youtube.LiveMessageParams.Params.Ids ids */ 5:
                    message.ids = LiveMessageParams_Params_Ids.internalBinaryRead(reader, reader.uint32(), options, message.ids);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LiveMessageParams_Params, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* youtube.LiveMessageParams.Params.Ids ids = 5; */
        if (message.ids)
            LiveMessageParams_Params_Ids.internalBinaryWrite(message.ids, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message youtube.LiveMessageParams.Params
 */
export const LiveMessageParams_Params = new LiveMessageParams_Params$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LiveMessageParams_Params_Ids$Type extends MessageType<LiveMessageParams_Params_Ids> {
    constructor() {
        super("youtube.LiveMessageParams.Params.Ids", [
            { no: 1, name: "channel_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "video_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LiveMessageParams_Params_Ids>): LiveMessageParams_Params_Ids {
        const message = { channelId: "", videoId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LiveMessageParams_Params_Ids>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LiveMessageParams_Params_Ids): LiveMessageParams_Params_Ids {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string channel_id */ 1:
                    message.channelId = reader.string();
                    break;
                case /* string video_id */ 2:
                    message.videoId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LiveMessageParams_Params_Ids, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string channel_id = 1; */
        if (message.channelId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.channelId);
        /* string video_id = 2; */
        if (message.videoId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.videoId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message youtube.LiveMessageParams.Params.Ids
 */
export const LiveMessageParams_Params_Ids = new LiveMessageParams_Params_Ids$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCommentsSectionParams$Type extends MessageType<GetCommentsSectionParams> {
    constructor() {
        super("youtube.GetCommentsSectionParams", [
            { no: 2, name: "ctx", kind: "message", T: () => GetCommentsSectionParams_Context },
            { no: 3, name: "unk_param", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "params", kind: "message", T: () => GetCommentsSectionParams_Params }
        ]);
    }
    create(value?: PartialMessage<GetCommentsSectionParams>): GetCommentsSectionParams {
        const message = { unkParam: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetCommentsSectionParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCommentsSectionParams): GetCommentsSectionParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* youtube.GetCommentsSectionParams.Context ctx */ 2:
                    message.ctx = GetCommentsSectionParams_Context.internalBinaryRead(reader, reader.uint32(), options, message.ctx);
                    break;
                case /* int32 unk_param */ 3:
                    message.unkParam = reader.int32();
                    break;
                case /* youtube.GetCommentsSectionParams.Params params */ 6:
                    message.params = GetCommentsSectionParams_Params.internalBinaryRead(reader, reader.uint32(), options, message.params);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCommentsSectionParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* youtube.GetCommentsSectionParams.Context ctx = 2; */
        if (message.ctx)
            GetCommentsSectionParams_Context.internalBinaryWrite(message.ctx, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int32 unk_param = 3; */
        if (message.unkParam !== 0)
            writer.tag(3, WireType.Varint).int32(message.unkParam);
        /* youtube.GetCommentsSectionParams.Params params = 6; */
        if (message.params)
            GetCommentsSectionParams_Params.internalBinaryWrite(message.params, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message youtube.GetCommentsSectionParams
 */
export const GetCommentsSectionParams = new GetCommentsSectionParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCommentsSectionParams_Context$Type extends MessageType<GetCommentsSectionParams_Context> {
    constructor() {
        super("youtube.GetCommentsSectionParams.Context", [
            { no: 2, name: "video_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetCommentsSectionParams_Context>): GetCommentsSectionParams_Context {
        const message = { videoId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetCommentsSectionParams_Context>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCommentsSectionParams_Context): GetCommentsSectionParams_Context {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string video_id */ 2:
                    message.videoId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCommentsSectionParams_Context, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string video_id = 2; */
        if (message.videoId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.videoId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message youtube.GetCommentsSectionParams.Context
 */
export const GetCommentsSectionParams_Context = new GetCommentsSectionParams_Context$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCommentsSectionParams_Params$Type extends MessageType<GetCommentsSectionParams_Params> {
    constructor() {
        super("youtube.GetCommentsSectionParams.Params", [
            { no: 1, name: "unk_token", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "opts", kind: "message", T: () => GetCommentsSectionParams_Params_Options },
            { no: 3, name: "replies_opts", kind: "message", T: () => GetCommentsSectionParams_Params_RepliesOptions },
            { no: 5, name: "page", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "target", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetCommentsSectionParams_Params>): GetCommentsSectionParams_Params {
        const message = { target: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetCommentsSectionParams_Params>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCommentsSectionParams_Params): GetCommentsSectionParams_Params {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string unk_token */ 1:
                    message.unkToken = reader.string();
                    break;
                case /* optional youtube.GetCommentsSectionParams.Params.Options opts */ 4:
                    message.opts = GetCommentsSectionParams_Params_Options.internalBinaryRead(reader, reader.uint32(), options, message.opts);
                    break;
                case /* optional youtube.GetCommentsSectionParams.Params.RepliesOptions replies_opts */ 3:
                    message.repliesOpts = GetCommentsSectionParams_Params_RepliesOptions.internalBinaryRead(reader, reader.uint32(), options, message.repliesOpts);
                    break;
                case /* optional int32 page */ 5:
                    message.page = reader.int32();
                    break;
                case /* string target */ 8:
                    message.target = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCommentsSectionParams_Params, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string unk_token = 1; */
        if (message.unkToken !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.unkToken);
        /* optional youtube.GetCommentsSectionParams.Params.Options opts = 4; */
        if (message.opts)
            GetCommentsSectionParams_Params_Options.internalBinaryWrite(message.opts, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* optional youtube.GetCommentsSectionParams.Params.RepliesOptions replies_opts = 3; */
        if (message.repliesOpts)
            GetCommentsSectionParams_Params_RepliesOptions.internalBinaryWrite(message.repliesOpts, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 page = 5; */
        if (message.page !== undefined)
            writer.tag(5, WireType.Varint).int32(message.page);
        /* string target = 8; */
        if (message.target !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.target);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message youtube.GetCommentsSectionParams.Params
 */
export const GetCommentsSectionParams_Params = new GetCommentsSectionParams_Params$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCommentsSectionParams_Params_Options$Type extends MessageType<GetCommentsSectionParams_Params_Options> {
    constructor() {
        super("youtube.GetCommentsSectionParams.Params.Options", [
            { no: 4, name: "video_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "sort_by", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 15, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetCommentsSectionParams_Params_Options>): GetCommentsSectionParams_Params_Options {
        const message = { videoId: "", sortBy: 0, type: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetCommentsSectionParams_Params_Options>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCommentsSectionParams_Params_Options): GetCommentsSectionParams_Params_Options {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string video_id */ 4:
                    message.videoId = reader.string();
                    break;
                case /* int32 sort_by */ 6:
                    message.sortBy = reader.int32();
                    break;
                case /* int32 type */ 15:
                    message.type = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCommentsSectionParams_Params_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string video_id = 4; */
        if (message.videoId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.videoId);
        /* int32 sort_by = 6; */
        if (message.sortBy !== 0)
            writer.tag(6, WireType.Varint).int32(message.sortBy);
        /* int32 type = 15; */
        if (message.type !== 0)
            writer.tag(15, WireType.Varint).int32(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message youtube.GetCommentsSectionParams.Params.Options
 */
export const GetCommentsSectionParams_Params_Options = new GetCommentsSectionParams_Params_Options$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCommentsSectionParams_Params_RepliesOptions$Type extends MessageType<GetCommentsSectionParams_Params_RepliesOptions> {
    constructor() {
        super("youtube.GetCommentsSectionParams.Params.RepliesOptions", [
            { no: 2, name: "comment_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "unkopts", kind: "message", T: () => GetCommentsSectionParams_Params_RepliesOptions_UnkOpts },
            { no: 5, name: "channel_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "video_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "unk_param_1", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "unk_param_2", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetCommentsSectionParams_Params_RepliesOptions>): GetCommentsSectionParams_Params_RepliesOptions {
        const message = { commentId: "", videoId: "", unkParam1: 0, unkParam2: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetCommentsSectionParams_Params_RepliesOptions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCommentsSectionParams_Params_RepliesOptions): GetCommentsSectionParams_Params_RepliesOptions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string comment_id */ 2:
                    message.commentId = reader.string();
                    break;
                case /* youtube.GetCommentsSectionParams.Params.RepliesOptions.UnkOpts unkopts */ 4:
                    message.unkopts = GetCommentsSectionParams_Params_RepliesOptions_UnkOpts.internalBinaryRead(reader, reader.uint32(), options, message.unkopts);
                    break;
                case /* optional string channel_id */ 5:
                    message.channelId = reader.string();
                    break;
                case /* string video_id */ 6:
                    message.videoId = reader.string();
                    break;
                case /* int32 unk_param_1 */ 8:
                    message.unkParam1 = reader.int32();
                    break;
                case /* int32 unk_param_2 */ 9:
                    message.unkParam2 = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCommentsSectionParams_Params_RepliesOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string comment_id = 2; */
        if (message.commentId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.commentId);
        /* youtube.GetCommentsSectionParams.Params.RepliesOptions.UnkOpts unkopts = 4; */
        if (message.unkopts)
            GetCommentsSectionParams_Params_RepliesOptions_UnkOpts.internalBinaryWrite(message.unkopts, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* optional string channel_id = 5; */
        if (message.channelId !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.channelId);
        /* string video_id = 6; */
        if (message.videoId !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.videoId);
        /* int32 unk_param_1 = 8; */
        if (message.unkParam1 !== 0)
            writer.tag(8, WireType.Varint).int32(message.unkParam1);
        /* int32 unk_param_2 = 9; */
        if (message.unkParam2 !== 0)
            writer.tag(9, WireType.Varint).int32(message.unkParam2);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message youtube.GetCommentsSectionParams.Params.RepliesOptions
 */
export const GetCommentsSectionParams_Params_RepliesOptions = new GetCommentsSectionParams_Params_RepliesOptions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCommentsSectionParams_Params_RepliesOptions_UnkOpts$Type extends MessageType<GetCommentsSectionParams_Params_RepliesOptions_UnkOpts> {
    constructor() {
        super("youtube.GetCommentsSectionParams.Params.RepliesOptions.UnkOpts", [
            { no: 1, name: "unk_param", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetCommentsSectionParams_Params_RepliesOptions_UnkOpts>): GetCommentsSectionParams_Params_RepliesOptions_UnkOpts {
        const message = { unkParam: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetCommentsSectionParams_Params_RepliesOptions_UnkOpts>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCommentsSectionParams_Params_RepliesOptions_UnkOpts): GetCommentsSectionParams_Params_RepliesOptions_UnkOpts {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 unk_param */ 1:
                    message.unkParam = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCommentsSectionParams_Params_RepliesOptions_UnkOpts, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 unk_param = 1; */
        if (message.unkParam !== 0)
            writer.tag(1, WireType.Varint).int32(message.unkParam);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message youtube.GetCommentsSectionParams.Params.RepliesOptions.UnkOpts
 */
export const GetCommentsSectionParams_Params_RepliesOptions_UnkOpts = new GetCommentsSectionParams_Params_RepliesOptions_UnkOpts$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateCommentParams$Type extends MessageType<CreateCommentParams> {
    constructor() {
        super("youtube.CreateCommentParams", [
            { no: 2, name: "video_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "params", kind: "message", T: () => CreateCommentParams_Params },
            { no: 10, name: "number", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CreateCommentParams>): CreateCommentParams {
        const message = { videoId: "", number: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateCommentParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateCommentParams): CreateCommentParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string video_id */ 2:
                    message.videoId = reader.string();
                    break;
                case /* youtube.CreateCommentParams.Params params */ 5:
                    message.params = CreateCommentParams_Params.internalBinaryRead(reader, reader.uint32(), options, message.params);
                    break;
                case /* int32 number */ 10:
                    message.number = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateCommentParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string video_id = 2; */
        if (message.videoId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.videoId);
        /* youtube.CreateCommentParams.Params params = 5; */
        if (message.params)
            CreateCommentParams_Params.internalBinaryWrite(message.params, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* int32 number = 10; */
        if (message.number !== 0)
            writer.tag(10, WireType.Varint).int32(message.number);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message youtube.CreateCommentParams
 */
export const CreateCommentParams = new CreateCommentParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateCommentParams_Params$Type extends MessageType<CreateCommentParams_Params> {
    constructor() {
        super("youtube.CreateCommentParams.Params", [
            { no: 1, name: "index", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CreateCommentParams_Params>): CreateCommentParams_Params {
        const message = { index: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateCommentParams_Params>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateCommentParams_Params): CreateCommentParams_Params {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 index */ 1:
                    message.index = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateCommentParams_Params, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 index = 1; */
        if (message.index !== 0)
            writer.tag(1, WireType.Varint).int32(message.index);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message youtube.CreateCommentParams.Params
 */
export const CreateCommentParams_Params = new CreateCommentParams_Params$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateCommentReplyParams$Type extends MessageType<CreateCommentReplyParams> {
    constructor() {
        super("youtube.CreateCommentReplyParams", [
            { no: 2, name: "video_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "comment_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "params", kind: "message", T: () => CreateCommentReplyParams_UnknownParams },
            { no: 10, name: "unk_num", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CreateCommentReplyParams>): CreateCommentReplyParams {
        const message = { videoId: "", commentId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateCommentReplyParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateCommentReplyParams): CreateCommentReplyParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string video_id */ 2:
                    message.videoId = reader.string();
                    break;
                case /* string comment_id */ 4:
                    message.commentId = reader.string();
                    break;
                case /* youtube.CreateCommentReplyParams.UnknownParams params */ 5:
                    message.params = CreateCommentReplyParams_UnknownParams.internalBinaryRead(reader, reader.uint32(), options, message.params);
                    break;
                case /* optional int32 unk_num */ 10:
                    message.unkNum = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateCommentReplyParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string video_id = 2; */
        if (message.videoId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.videoId);
        /* string comment_id = 4; */
        if (message.commentId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.commentId);
        /* youtube.CreateCommentReplyParams.UnknownParams params = 5; */
        if (message.params)
            CreateCommentReplyParams_UnknownParams.internalBinaryWrite(message.params, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 unk_num = 10; */
        if (message.unkNum !== undefined)
            writer.tag(10, WireType.Varint).int32(message.unkNum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message youtube.CreateCommentReplyParams
 */
export const CreateCommentReplyParams = new CreateCommentReplyParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateCommentReplyParams_UnknownParams$Type extends MessageType<CreateCommentReplyParams_UnknownParams> {
    constructor() {
        super("youtube.CreateCommentReplyParams.UnknownParams", [
            { no: 1, name: "unk_num", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CreateCommentReplyParams_UnknownParams>): CreateCommentReplyParams_UnknownParams {
        const message = { unkNum: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateCommentReplyParams_UnknownParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateCommentReplyParams_UnknownParams): CreateCommentReplyParams_UnknownParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 unk_num */ 1:
                    message.unkNum = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateCommentReplyParams_UnknownParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 unk_num = 1; */
        if (message.unkNum !== 0)
            writer.tag(1, WireType.Varint).int32(message.unkNum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message youtube.CreateCommentReplyParams.UnknownParams
 */
export const CreateCommentReplyParams_UnknownParams = new CreateCommentReplyParams_UnknownParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PeformCommentActionParams$Type extends MessageType<PeformCommentActionParams> {
    constructor() {
        super("youtube.PeformCommentActionParams", [
            { no: 1, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "comment_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "video_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "unk_num", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 23, name: "channel_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 31, name: "translate_comment_params", kind: "message", T: () => PeformCommentActionParams_TranslateCommentParams }
        ]);
    }
    create(value?: PartialMessage<PeformCommentActionParams>): PeformCommentActionParams {
        const message = { type: 0, commentId: "", videoId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PeformCommentActionParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PeformCommentActionParams): PeformCommentActionParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 type */ 1:
                    message.type = reader.int32();
                    break;
                case /* string comment_id */ 3:
                    message.commentId = reader.string();
                    break;
                case /* string video_id */ 5:
                    message.videoId = reader.string();
                    break;
                case /* optional int32 unk_num */ 2:
                    message.unkNum = reader.int32();
                    break;
                case /* optional string channel_id */ 23:
                    message.channelId = reader.string();
                    break;
                case /* optional youtube.PeformCommentActionParams.TranslateCommentParams translate_comment_params */ 31:
                    message.translateCommentParams = PeformCommentActionParams_TranslateCommentParams.internalBinaryRead(reader, reader.uint32(), options, message.translateCommentParams);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PeformCommentActionParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* string comment_id = 3; */
        if (message.commentId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.commentId);
        /* string video_id = 5; */
        if (message.videoId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.videoId);
        /* optional int32 unk_num = 2; */
        if (message.unkNum !== undefined)
            writer.tag(2, WireType.Varint).int32(message.unkNum);
        /* optional string channel_id = 23; */
        if (message.channelId !== undefined)
            writer.tag(23, WireType.LengthDelimited).string(message.channelId);
        /* optional youtube.PeformCommentActionParams.TranslateCommentParams translate_comment_params = 31; */
        if (message.translateCommentParams)
            PeformCommentActionParams_TranslateCommentParams.internalBinaryWrite(message.translateCommentParams, writer.tag(31, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message youtube.PeformCommentActionParams
 */
export const PeformCommentActionParams = new PeformCommentActionParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PeformCommentActionParams_TranslateCommentParams$Type extends MessageType<PeformCommentActionParams_TranslateCommentParams> {
    constructor() {
        super("youtube.PeformCommentActionParams.TranslateCommentParams", [
            { no: 3, name: "params", kind: "message", T: () => PeformCommentActionParams_TranslateCommentParams_Params },
            { no: 2, name: "comment_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "target_language", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PeformCommentActionParams_TranslateCommentParams>): PeformCommentActionParams_TranslateCommentParams {
        const message = { commentId: "", targetLanguage: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PeformCommentActionParams_TranslateCommentParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PeformCommentActionParams_TranslateCommentParams): PeformCommentActionParams_TranslateCommentParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* youtube.PeformCommentActionParams.TranslateCommentParams.Params params */ 3:
                    message.params = PeformCommentActionParams_TranslateCommentParams_Params.internalBinaryRead(reader, reader.uint32(), options, message.params);
                    break;
                case /* string comment_id */ 2:
                    message.commentId = reader.string();
                    break;
                case /* string target_language */ 4:
                    message.targetLanguage = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PeformCommentActionParams_TranslateCommentParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* youtube.PeformCommentActionParams.TranslateCommentParams.Params params = 3; */
        if (message.params)
            PeformCommentActionParams_TranslateCommentParams_Params.internalBinaryWrite(message.params, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string comment_id = 2; */
        if (message.commentId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.commentId);
        /* string target_language = 4; */
        if (message.targetLanguage !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.targetLanguage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message youtube.PeformCommentActionParams.TranslateCommentParams
 */
export const PeformCommentActionParams_TranslateCommentParams = new PeformCommentActionParams_TranslateCommentParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PeformCommentActionParams_TranslateCommentParams_Params$Type extends MessageType<PeformCommentActionParams_TranslateCommentParams_Params> {
    constructor() {
        super("youtube.PeformCommentActionParams.TranslateCommentParams.Params", [
            { no: 1, name: "comment", kind: "message", T: () => PeformCommentActionParams_TranslateCommentParams_Params_Comment }
        ]);
    }
    create(value?: PartialMessage<PeformCommentActionParams_TranslateCommentParams_Params>): PeformCommentActionParams_TranslateCommentParams_Params {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PeformCommentActionParams_TranslateCommentParams_Params>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PeformCommentActionParams_TranslateCommentParams_Params): PeformCommentActionParams_TranslateCommentParams_Params {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* youtube.PeformCommentActionParams.TranslateCommentParams.Params.Comment comment */ 1:
                    message.comment = PeformCommentActionParams_TranslateCommentParams_Params_Comment.internalBinaryRead(reader, reader.uint32(), options, message.comment);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PeformCommentActionParams_TranslateCommentParams_Params, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* youtube.PeformCommentActionParams.TranslateCommentParams.Params.Comment comment = 1; */
        if (message.comment)
            PeformCommentActionParams_TranslateCommentParams_Params_Comment.internalBinaryWrite(message.comment, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message youtube.PeformCommentActionParams.TranslateCommentParams.Params
 */
export const PeformCommentActionParams_TranslateCommentParams_Params = new PeformCommentActionParams_TranslateCommentParams_Params$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PeformCommentActionParams_TranslateCommentParams_Params_Comment$Type extends MessageType<PeformCommentActionParams_TranslateCommentParams_Params_Comment> {
    constructor() {
        super("youtube.PeformCommentActionParams.TranslateCommentParams.Params.Comment", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PeformCommentActionParams_TranslateCommentParams_Params_Comment>): PeformCommentActionParams_TranslateCommentParams_Params_Comment {
        const message = { text: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PeformCommentActionParams_TranslateCommentParams_Params_Comment>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PeformCommentActionParams_TranslateCommentParams_Params_Comment): PeformCommentActionParams_TranslateCommentParams_Params_Comment {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PeformCommentActionParams_TranslateCommentParams_Params_Comment, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message youtube.PeformCommentActionParams.TranslateCommentParams.Params.Comment
 */
export const PeformCommentActionParams_TranslateCommentParams_Params_Comment = new PeformCommentActionParams_TranslateCommentParams_Params_Comment$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MusicSearchFilter$Type extends MessageType<MusicSearchFilter> {
    constructor() {
        super("youtube.MusicSearchFilter", [
            { no: 2, name: "filters", kind: "message", T: () => MusicSearchFilter_Filters }
        ]);
    }
    create(value?: PartialMessage<MusicSearchFilter>): MusicSearchFilter {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MusicSearchFilter>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MusicSearchFilter): MusicSearchFilter {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional youtube.MusicSearchFilter.Filters filters */ 2:
                    message.filters = MusicSearchFilter_Filters.internalBinaryRead(reader, reader.uint32(), options, message.filters);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MusicSearchFilter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional youtube.MusicSearchFilter.Filters filters = 2; */
        if (message.filters)
            MusicSearchFilter_Filters.internalBinaryWrite(message.filters, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message youtube.MusicSearchFilter
 */
export const MusicSearchFilter = new MusicSearchFilter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MusicSearchFilter_Filters$Type extends MessageType<MusicSearchFilter_Filters> {
    constructor() {
        super("youtube.MusicSearchFilter.Filters", [
            { no: 17, name: "type", kind: "message", T: () => MusicSearchFilter_Filters_Type }
        ]);
    }
    create(value?: PartialMessage<MusicSearchFilter_Filters>): MusicSearchFilter_Filters {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MusicSearchFilter_Filters>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MusicSearchFilter_Filters): MusicSearchFilter_Filters {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional youtube.MusicSearchFilter.Filters.Type type */ 17:
                    message.type = MusicSearchFilter_Filters_Type.internalBinaryRead(reader, reader.uint32(), options, message.type);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MusicSearchFilter_Filters, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional youtube.MusicSearchFilter.Filters.Type type = 17; */
        if (message.type)
            MusicSearchFilter_Filters_Type.internalBinaryWrite(message.type, writer.tag(17, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message youtube.MusicSearchFilter.Filters
 */
export const MusicSearchFilter_Filters = new MusicSearchFilter_Filters$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MusicSearchFilter_Filters_Type$Type extends MessageType<MusicSearchFilter_Filters_Type> {
    constructor() {
        super("youtube.MusicSearchFilter.Filters.Type", [
            { no: 1, name: "song", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "video", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "album", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "artist", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "playlist", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<MusicSearchFilter_Filters_Type>): MusicSearchFilter_Filters_Type {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MusicSearchFilter_Filters_Type>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MusicSearchFilter_Filters_Type): MusicSearchFilter_Filters_Type {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 song */ 1:
                    message.song = reader.int32();
                    break;
                case /* optional int32 video */ 2:
                    message.video = reader.int32();
                    break;
                case /* optional int32 album */ 3:
                    message.album = reader.int32();
                    break;
                case /* optional int32 artist */ 4:
                    message.artist = reader.int32();
                    break;
                case /* optional int32 playlist */ 5:
                    message.playlist = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MusicSearchFilter_Filters_Type, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 song = 1; */
        if (message.song !== undefined)
            writer.tag(1, WireType.Varint).int32(message.song);
        /* optional int32 video = 2; */
        if (message.video !== undefined)
            writer.tag(2, WireType.Varint).int32(message.video);
        /* optional int32 album = 3; */
        if (message.album !== undefined)
            writer.tag(3, WireType.Varint).int32(message.album);
        /* optional int32 artist = 4; */
        if (message.artist !== undefined)
            writer.tag(4, WireType.Varint).int32(message.artist);
        /* optional int32 playlist = 5; */
        if (message.playlist !== undefined)
            writer.tag(5, WireType.Varint).int32(message.playlist);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message youtube.MusicSearchFilter.Filters.Type
 */
export const MusicSearchFilter_Filters_Type = new MusicSearchFilter_Filters_Type$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SearchFilter$Type extends MessageType<SearchFilter> {
    constructor() {
        super("youtube.SearchFilter", [
            { no: 1, name: "sort_by", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 19, name: "no_filter", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "filters", kind: "message", T: () => SearchFilter_Filters }
        ]);
    }
    create(value?: PartialMessage<SearchFilter>): SearchFilter {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SearchFilter>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SearchFilter): SearchFilter {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 sort_by */ 1:
                    message.sortBy = reader.int32();
                    break;
                case /* optional int32 no_filter */ 19:
                    message.noFilter = reader.int32();
                    break;
                case /* optional youtube.SearchFilter.Filters filters */ 2:
                    message.filters = SearchFilter_Filters.internalBinaryRead(reader, reader.uint32(), options, message.filters);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SearchFilter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 sort_by = 1; */
        if (message.sortBy !== undefined)
            writer.tag(1, WireType.Varint).int32(message.sortBy);
        /* optional int32 no_filter = 19; */
        if (message.noFilter !== undefined)
            writer.tag(19, WireType.Varint).int32(message.noFilter);
        /* optional youtube.SearchFilter.Filters filters = 2; */
        if (message.filters)
            SearchFilter_Filters.internalBinaryWrite(message.filters, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message youtube.SearchFilter
 */
export const SearchFilter = new SearchFilter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SearchFilter_Filters$Type extends MessageType<SearchFilter_Filters> {
    constructor() {
        super("youtube.SearchFilter.Filters", [
            { no: 1, name: "upload_date", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "type", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "duration", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SearchFilter_Filters>): SearchFilter_Filters {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SearchFilter_Filters>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SearchFilter_Filters): SearchFilter_Filters {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 upload_date */ 1:
                    message.uploadDate = reader.int32();
                    break;
                case /* optional int32 type */ 2:
                    message.type = reader.int32();
                    break;
                case /* optional int32 duration */ 3:
                    message.duration = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SearchFilter_Filters, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 upload_date = 1; */
        if (message.uploadDate !== undefined)
            writer.tag(1, WireType.Varint).int32(message.uploadDate);
        /* optional int32 type = 2; */
        if (message.type !== undefined)
            writer.tag(2, WireType.Varint).int32(message.type);
        /* optional int32 duration = 3; */
        if (message.duration !== undefined)
            writer.tag(3, WireType.Varint).int32(message.duration);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message youtube.SearchFilter.Filters
 */
export const SearchFilter_Filters = new SearchFilter_Filters$Type();
