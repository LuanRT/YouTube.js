// TODO: clean this up

syntax = "proto2";
package youtube;

message VisitorData {
  required string id = 1;
  required int32 timestamp = 5;
}

message InnertubePayload {
  message Context {
    message Client {
      string deviceMake = 12;
      string deviceModel = 13;
      int32 nameId = 16;
      string clientVersion = 17;
      string osName = 18;
      string osVersion = 19;
      string acceptLanguage = 21;
      string acceptRegion = 22;
      int32 windowWidthPoints = 37;
      int32 windowHeightPoints = 38;
      int32 androidSdkVersion = 34;
    }
    required Client client = 1;
  }
  
  required Context context = 1;
  
  optional string videoId = 2;
  
  /**** YT Sudio stuff ****/ 
  
  message Title {
    required string text = 1;
  }
  
  optional Title title = 3;
  
  message Description {
    required string text = 1;
  }
  
  optional Description description = 4;
  
  message Tags {
    repeated string list = 1;
  }
  
  optional Tags tags = 6;
  
  message Privacy {
    required int32 type = 1;
  }
  
  optional Privacy privacy = 38;
  
  message Category {
    required int32 id = 1;
  }
  
  optional Category category = 7;
  
  message MadeForKids {
    required int32 unkparam = 1;
    required int32 choice = 2;
  }
  
  optional MadeForKids made_for_kids = 68;
  
  message AgeRestricted {
    required int32 unkparam = 1;
    required int32 choice = 2;
  }
  
  optional AgeRestricted age_restricted = 69;

  message License {
    required string type = 1;
  }
  
  optional License license = 8;
  
  message VideoThumbnail {
    required int32 type = 1; // is this something else?
 
    message Thumbnail {
      required bytes image_data = 1;
    }
    
    required Thumbnail thumbnail = 3;
  }
  
  optional VideoThumbnail video_thumbnail = 20;
}

message ChannelAnalytics {
  message Params {
    required string channel_id = 1001;
  }

  required Params params = 32;
}

message SoundInfoParams {
  message Sound {
    message Params {
      message Ids {
        required string id_1 = 1;
        required string id_2 = 2;
        required string id_3 = 3;
      }
      required Ids ids = 2;
    }
    required Params params = 1;
  }
  
  required Sound sound = 94;
}

message NotificationPreferences {
  required string channel_id = 1;
 
  message Preference {
    required int32 index = 1;
  }
  
  required Preference pref_id = 2;
  
  optional int32 number_0 = 3;
  optional int32 number_1 = 4;
}

message LiveMessageParams {
  message Params {
    message Ids {
      required string channel_id = 1;
      required string video_id = 2;
    }
   required  Ids ids = 5;
  }
  
  required Params params = 1;
  
  optional int32 number_0 = 2;
  optional int32 number_1 = 3;
}

message GetCommentsSectionParams {
  message Context {
    required string video_id = 2;
  }
  required Context ctx = 2;
  
  required int32 unk_param = 3;
  
  message Params {
    optional string unk_token = 1;
    
    message Options {
      required string video_id = 4;
      required int32 sort_by = 6;
      required int32 type = 15;
    }
    
    message RepliesOptions {
      required string comment_id = 2;
    
      message UnkOpts {
        required int32 unk_param = 1;
      }
      required UnkOpts unkopts = 4;
      
      optional string channel_id = 5;
      required string video_id = 6;
      
      required int32 unk_param_1 = 8;
      required int32 unk_param_2 = 9;
    }
    
    optional Options opts = 4;
    optional RepliesOptions replies_opts = 3;
    
    optional int32 page = 5;
    required string target = 8;
  }
  
  required Params params = 6;
}

message CreateCommentParams {
  required string video_id = 2;
  message Params {
    required int32 index = 1;
  }
  required Params params = 5;
  required int32 number = 10;
}

message PeformCommentActionParams {
  required int32 type = 1;
  required string comment_id = 3;
  required string video_id = 5;
  
  optional int32 unk_num = 2;
  optional string channel_id = 23;
  
  message TranslateCommentParams {
    message Params {
      message Comment {
        required string text = 1;
      }
      required Comment comment = 1;
    }
    required Params params = 3;
    
    required string comment_id = 2;
    required string target_language = 4;
  }
  
  optional TranslateCommentParams translate_comment_params = 31;
}

message MusicSearchFilter {
  message Filters {
    message Type {
      // TODO: protoc doesn't allow zero index: optional int32 all = 0;
      optional int32 song = 1;
      optional int32 video = 2;
      optional int32 album = 3;
      optional int32 artist = 4;
      optional int32 playlist = 5;
    }
    
    optional Type type = 17;
  }
  
  optional Filters filters = 2;
}

message SearchFilter {
  optional int32 sort_by = 1;
  optional int32 no_filter = 19;
  
  message Filters {
    optional int32 upload_date = 1;
    optional int32 type = 2;
    optional int32 duration = 3;

    optional int32 features_hd = 4;
    optional int32 features_subtitles = 5;
    optional int32 features_creative_commons = 6;
    optional int32 features_3d = 7;
    optional int32 features_live = 8;
    optional int32 features_purchased = 9;
    optional int32 features_4k = 14;
    optional int32 features_360 = 15;
    optional int32 features_location = 23;
    optional int32 features_hdr = 25;
    optional int32 features_vr180 = 26; 
  }
  
  optional Filters filters = 2;
}

message Hashtag {
  message Params {
    required string hashtag = 1;
    required int32 type = 3;
  }
  
  required Params params = 93;
}

message ReelSequence {
  required string short_id = 1;
  message Params {
    required int32 number = 3;
  }

  required Params params = 5;
  required int32 feature_2 = 10;
  required int32 feature_3 = 13;
}

message ShortsParam {
  message Field1 {
    int32 p1 = 1;
  }
  Field1 f1 = 1;
  int32 p59 = 59;
}

message FormatId {
  required int32 itag = 1;
  required int64 last_modified = 2;
  map<int32, string> field3 = 3;  // Assuming it's a map since it's always an empty object
}

message InitRange {
  required int32 start = 1;
  required int32 end = 2;
}

message IndexRange {
  required int32 start = 1;
  required int32 end = 2;
}

message PlaybackCookie {
  int32 field1 = 1; // Always 999999??
  int32 field2 = 2;
  FormatId video_fmt = 7;
  FormatId audio_fmt = 8;
}

message Redirect {
  required string url = 1;
}

message PlaybackStartPolicy {
  message ReadaheadPolicy {
    int32 min_readahead_ms = 2;
    optional int32 min_bandwidth_bytes_per_sec = 1;
  }

  ReadaheadPolicy start_min_readahead_policy = 1;
  ReadaheadPolicy resume_min_readahead_policy = 2;
}

message RequestCancellationPolicy {
  message Item {
    int32 fR = 1;
    int32 NK = 2;
    optional int32 minReadaheadMs = 3;
  }

  int32 N0 = 1;
  repeated Item items = 2;
  optional int32 jq = 3;
}

message NextRequestPolicy {
  int32 target_audio_readahead_ms = 1;
  int32 target_video_readahead_ms = 2;
  optional int32 backoff_time_ms = 4;
  optional PlaybackCookie playback_cookie = 7;
  optional string video_id = 8;
}

message StreamProtectionStatus {
  int32 status = 1;
  optional int32 field2 = 2;
}

message FormatInitializationMetadata {
  string video_id = 1;
  FormatId format_id = 2;
  int32 end_time_ms = 3;
  int32 field4 = 4;
  string mime_type = 5;
  InitRange init_range = 6;
  IndexRange index_range = 7;
  optional int32 field8 = 8;
  optional int32 duration_ms = 9;
  optional int32 field10 = 10; 
}

message MediaHeader {
  int32 field1 = 1; 
  string video_id = 2;
  int32 itag = 3;
  int64 lmt = 4;
  int32 start_data_range = 6;
  int32 field8 = 8;
  int32 field9 = 9;
  optional int32 field10 = 10;
  optional int32 start_ms = 11;
  optional int32 duration_ms = 12;
  FormatId format_id = 13;
  int32 content_length = 14;
  optional TimeRange time_range = 15;

  message TimeRange {
    required int32 field1 = 1;
    required int32 field2 = 2;
    required int32 field3 = 3;
  }
}