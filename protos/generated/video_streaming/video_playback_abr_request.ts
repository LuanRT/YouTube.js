// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.0
// source: video_streaming/video_playback_abr_request.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { FormatId } from "../misc/common.js";

export const protobufPackage = "video_streaming";

export interface VideoPlaybackAbrRequest {
  mediaInfo?: MediaInfo | undefined;
  formatIds: FormatId[];
  ud: Zpa[];
  videoPlaybackUstreamerConfig?: Uint8Array | undefined;
  lo?: Lo | undefined;
  audioFormatIds: FormatId[];
  videoFormatIds: FormatId[];
  sc?: Upa | undefined;
  field21?: OQa | undefined;
  field22?: number | undefined;
  field23?: number | undefined;
  field1000: Pqa[];
}

export interface MediaInfo {
  timeSinceLastManualFormatSelectionMs?: number | undefined;
  lastManualDirection?: number | undefined;
  videoWidth?: number | undefined;
  detailedNetworkType?: number | undefined;
  B7?: number | undefined;
  A7?: number | undefined;
  iea?: number | undefined;
  r7?: number | undefined;
  startTimeMs?: number | undefined;
  zea?: number | undefined;
  visibility?: number | undefined;
  d8?: number | undefined;
  mediaCapabilities?: MediaInfo_MediaCapabilities | undefined;
  yea?:
    | number
    | undefined;
  /** optional int32 Gw = 40; */
  mediaType?: MediaInfo_MediaType | undefined;
  playerState?: number | undefined;
  a8?: boolean | undefined;
  Jda?: number | undefined;
  qw?: number | undefined;
  Ky?: number | undefined;
  Eq?: number | undefined;
  l?: boolean | undefined;
  G7?: number | undefined;
  No?: boolean | undefined;
  qj?: number | undefined;
  Hx?: number | undefined;
  isPrefetch?: boolean | undefined;
  Iz?: number | undefined;
  sabrLicenseConstraint?: Uint8Array | undefined;
  l2?: number | undefined;
  k2?: number | undefined;
  Tqb?: number | undefined;
  c?: number | undefined;
}

export enum MediaInfo_MediaType {
  MEDIA_TYPE_DEFAULT = 0,
  MEDIA_TYPE_AUDIO = 1,
  MEDIA_TYPE_VIDEO = 2,
  UNRECOGNIZED = -1,
}

export function mediaInfo_MediaTypeFromJSON(object: any): MediaInfo_MediaType {
  switch (object) {
    case 0:
    case "MEDIA_TYPE_DEFAULT":
      return MediaInfo_MediaType.MEDIA_TYPE_DEFAULT;
    case 1:
    case "MEDIA_TYPE_AUDIO":
      return MediaInfo_MediaType.MEDIA_TYPE_AUDIO;
    case 2:
    case "MEDIA_TYPE_VIDEO":
      return MediaInfo_MediaType.MEDIA_TYPE_VIDEO;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MediaInfo_MediaType.UNRECOGNIZED;
  }
}

export function mediaInfo_MediaTypeToJSON(object: MediaInfo_MediaType): string {
  switch (object) {
    case MediaInfo_MediaType.MEDIA_TYPE_DEFAULT:
      return "MEDIA_TYPE_DEFAULT";
    case MediaInfo_MediaType.MEDIA_TYPE_AUDIO:
      return "MEDIA_TYPE_AUDIO";
    case MediaInfo_MediaType.MEDIA_TYPE_VIDEO:
      return "MEDIA_TYPE_VIDEO";
    case MediaInfo_MediaType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface MediaInfo_MediaCapabilities {
  videoFormatCapabilities: MediaInfo_MediaCapabilities_VideoFormatCapability[];
  audioFormatCapabilities: MediaInfo_MediaCapabilities_AudioFormatCapability[];
  hdrModeBitmask?: number | undefined;
}

export interface MediaInfo_MediaCapabilities_VideoFormatCapability {
  videoCodec?: number | undefined;
  maxHeight?: number | undefined;
  maxWidth?: number | undefined;
  maxFramerate?: number | undefined;
  maxBitrateBps?: number | undefined;
  is10BitSupported?: boolean | undefined;
}

export interface MediaInfo_MediaCapabilities_AudioFormatCapability {
  audioCodec?: number | undefined;
  numChannels?: number | undefined;
  maxBitrateBps?: number | undefined;
  spatialCapabilityBitmask?: number | undefined;
}

export interface Lo {
  formatId?: FormatId | undefined;
  Lj?: number | undefined;
  sequenceNumber?: number | undefined;
  field4?: Lo_Field4 | undefined;
  MZ?: number | undefined;
}

export interface Lo_Field4 {
  field1?: number | undefined;
  field2?: number | undefined;
  field3?: number | undefined;
}

export interface Kob {
  EW: Kob_Pa[];
}

export interface Kob_Pa {
  videoId?: string | undefined;
  lmt?: number | undefined;
}

export interface YPa {
  field1?: number | undefined;
  field2?: number | undefined;
  field3?: number | undefined;
}

export interface Zpa {
  formatId: FormatId | undefined;
  startTimeMs: number;
  durationMs: number;
  field4: number;
  field5: number;
  field9?: Kob | undefined;
  field11?: YPa | undefined;
  field12?: YPa | undefined;
}

export interface Upa {
  clientInfo?: Upa_ClientInfo | undefined;
  poToken?: Uint8Array | undefined;
  playbackCookie?: Uint8Array | undefined;
  gp?: Uint8Array | undefined;
  field5: Upa_Fqa[];
  field6: number[];
  field7?: string | undefined;
  field8?: Upa_Gqa | undefined;
}

export interface Upa_ClientInfo {
  deviceMake?: string | undefined;
  deviceModel?: string | undefined;
  clientName?: number | undefined;
  clientVersion?: string | undefined;
  osName?: string | undefined;
  osVersion?: string | undefined;
}

export interface Upa_Fqa {
  type?: number | undefined;
  value?: Uint8Array | undefined;
}

export interface Upa_Gqa {
  field1?: Uint8Array | undefined;
  field2?: Upa_Gqa_Hqa | undefined;
}

export interface Upa_Gqa_Hqa {
  code?: number | undefined;
  message?: string | undefined;
}

export interface OQa {
  field1: string[];
  field2?: Uint8Array | undefined;
  field3?: string | undefined;
  field4?: number | undefined;
  field5?: number | undefined;
  field6?: string | undefined;
}

export interface Pqa {
  formatIds: FormatId[];
  ud: Zpa[];
  clipId?: string | undefined;
}

function createBaseVideoPlaybackAbrRequest(): VideoPlaybackAbrRequest {
  return {
    mediaInfo: undefined,
    formatIds: [],
    ud: [],
    videoPlaybackUstreamerConfig: undefined,
    lo: undefined,
    audioFormatIds: [],
    videoFormatIds: [],
    sc: undefined,
    field21: undefined,
    field22: undefined,
    field23: undefined,
    field1000: [],
  };
}

export const VideoPlaybackAbrRequest: MessageFns<VideoPlaybackAbrRequest> = {
  encode(message: VideoPlaybackAbrRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.mediaInfo !== undefined) {
      MediaInfo.encode(message.mediaInfo, writer.uint32(10).fork()).join();
    }
    for (const v of message.formatIds) {
      FormatId.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.ud) {
      Zpa.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.videoPlaybackUstreamerConfig !== undefined) {
      writer.uint32(42).bytes(message.videoPlaybackUstreamerConfig);
    }
    if (message.lo !== undefined) {
      Lo.encode(message.lo, writer.uint32(50).fork()).join();
    }
    for (const v of message.audioFormatIds) {
      FormatId.encode(v!, writer.uint32(130).fork()).join();
    }
    for (const v of message.videoFormatIds) {
      FormatId.encode(v!, writer.uint32(138).fork()).join();
    }
    if (message.sc !== undefined) {
      Upa.encode(message.sc, writer.uint32(154).fork()).join();
    }
    if (message.field21 !== undefined) {
      OQa.encode(message.field21, writer.uint32(170).fork()).join();
    }
    if (message.field22 !== undefined) {
      writer.uint32(176).int32(message.field22);
    }
    if (message.field23 !== undefined) {
      writer.uint32(184).int32(message.field23);
    }
    for (const v of message.field1000) {
      Pqa.encode(v!, writer.uint32(8002).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VideoPlaybackAbrRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVideoPlaybackAbrRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.mediaInfo = MediaInfo.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.formatIds.push(FormatId.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.ud.push(Zpa.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.videoPlaybackUstreamerConfig = reader.bytes();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.lo = Lo.decode(reader, reader.uint32());
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.audioFormatIds.push(FormatId.decode(reader, reader.uint32()));
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.videoFormatIds.push(FormatId.decode(reader, reader.uint32()));
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.sc = Upa.decode(reader, reader.uint32());
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.field21 = OQa.decode(reader, reader.uint32());
          continue;
        case 22:
          if (tag !== 176) {
            break;
          }

          message.field22 = reader.int32();
          continue;
        case 23:
          if (tag !== 184) {
            break;
          }

          message.field23 = reader.int32();
          continue;
        case 1000:
          if (tag !== 8002) {
            break;
          }

          message.field1000.push(Pqa.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VideoPlaybackAbrRequest {
    return {
      mediaInfo: isSet(object.mediaInfo) ? MediaInfo.fromJSON(object.mediaInfo) : undefined,
      formatIds: globalThis.Array.isArray(object?.formatIds)
        ? object.formatIds.map((e: any) => FormatId.fromJSON(e))
        : [],
      ud: globalThis.Array.isArray(object?.ud) ? object.ud.map((e: any) => Zpa.fromJSON(e)) : [],
      videoPlaybackUstreamerConfig: isSet(object.videoPlaybackUstreamerConfig)
        ? bytesFromBase64(object.videoPlaybackUstreamerConfig)
        : undefined,
      lo: isSet(object.lo) ? Lo.fromJSON(object.lo) : undefined,
      audioFormatIds: globalThis.Array.isArray(object?.audioFormatIds)
        ? object.audioFormatIds.map((e: any) => FormatId.fromJSON(e))
        : [],
      videoFormatIds: globalThis.Array.isArray(object?.videoFormatIds)
        ? object.videoFormatIds.map((e: any) => FormatId.fromJSON(e))
        : [],
      sc: isSet(object.sc) ? Upa.fromJSON(object.sc) : undefined,
      field21: isSet(object.field21) ? OQa.fromJSON(object.field21) : undefined,
      field22: isSet(object.field22) ? globalThis.Number(object.field22) : undefined,
      field23: isSet(object.field23) ? globalThis.Number(object.field23) : undefined,
      field1000: globalThis.Array.isArray(object?.field1000)
        ? object.field1000.map((e: any) => Pqa.fromJSON(e))
        : [],
    };
  },

  toJSON(message: VideoPlaybackAbrRequest): unknown {
    const obj: any = {};
    if (message.mediaInfo !== undefined) {
      obj.mediaInfo = MediaInfo.toJSON(message.mediaInfo);
    }
    if (message.formatIds?.length) {
      obj.formatIds = message.formatIds.map((e) => FormatId.toJSON(e));
    }
    if (message.ud?.length) {
      obj.ud = message.ud.map((e) => Zpa.toJSON(e));
    }
    if (message.videoPlaybackUstreamerConfig !== undefined) {
      obj.videoPlaybackUstreamerConfig = base64FromBytes(message.videoPlaybackUstreamerConfig);
    }
    if (message.lo !== undefined) {
      obj.lo = Lo.toJSON(message.lo);
    }
    if (message.audioFormatIds?.length) {
      obj.audioFormatIds = message.audioFormatIds.map((e) => FormatId.toJSON(e));
    }
    if (message.videoFormatIds?.length) {
      obj.videoFormatIds = message.videoFormatIds.map((e) => FormatId.toJSON(e));
    }
    if (message.sc !== undefined) {
      obj.sc = Upa.toJSON(message.sc);
    }
    if (message.field21 !== undefined) {
      obj.field21 = OQa.toJSON(message.field21);
    }
    if (message.field22 !== undefined) {
      obj.field22 = Math.round(message.field22);
    }
    if (message.field23 !== undefined) {
      obj.field23 = Math.round(message.field23);
    }
    if (message.field1000?.length) {
      obj.field1000 = message.field1000.map((e) => Pqa.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VideoPlaybackAbrRequest>, I>>(base?: I): VideoPlaybackAbrRequest {
    return VideoPlaybackAbrRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VideoPlaybackAbrRequest>, I>>(object: I): VideoPlaybackAbrRequest {
    const message = createBaseVideoPlaybackAbrRequest();
    message.mediaInfo = (object.mediaInfo !== undefined && object.mediaInfo !== null)
      ? MediaInfo.fromPartial(object.mediaInfo)
      : undefined;
    message.formatIds = object.formatIds?.map((e) => FormatId.fromPartial(e)) || [];
    message.ud = object.ud?.map((e) => Zpa.fromPartial(e)) || [];
    message.videoPlaybackUstreamerConfig = object.videoPlaybackUstreamerConfig ?? undefined;
    message.lo = (object.lo !== undefined && object.lo !== null) ? Lo.fromPartial(object.lo) : undefined;
    message.audioFormatIds = object.audioFormatIds?.map((e) => FormatId.fromPartial(e)) || [];
    message.videoFormatIds = object.videoFormatIds?.map((e) => FormatId.fromPartial(e)) || [];
    message.sc = (object.sc !== undefined && object.sc !== null) ? Upa.fromPartial(object.sc) : undefined;
    message.field21 = (object.field21 !== undefined && object.field21 !== null)
      ? OQa.fromPartial(object.field21)
      : undefined;
    message.field22 = object.field22 ?? undefined;
    message.field23 = object.field23 ?? undefined;
    message.field1000 = object.field1000?.map((e) => Pqa.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMediaInfo(): MediaInfo {
  return {
    timeSinceLastManualFormatSelectionMs: undefined,
    lastManualDirection: undefined,
    videoWidth: undefined,
    detailedNetworkType: undefined,
    B7: undefined,
    A7: undefined,
    iea: undefined,
    r7: undefined,
    startTimeMs: undefined,
    zea: undefined,
    visibility: undefined,
    d8: undefined,
    mediaCapabilities: undefined,
    yea: undefined,
    mediaType: undefined,
    playerState: undefined,
    a8: undefined,
    Jda: undefined,
    qw: undefined,
    Ky: undefined,
    Eq: undefined,
    l: undefined,
    G7: undefined,
    No: undefined,
    qj: undefined,
    Hx: undefined,
    isPrefetch: undefined,
    Iz: undefined,
    sabrLicenseConstraint: undefined,
    l2: undefined,
    k2: undefined,
    Tqb: undefined,
    c: undefined,
  };
}

export const MediaInfo: MessageFns<MediaInfo> = {
  encode(message: MediaInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.timeSinceLastManualFormatSelectionMs !== undefined) {
      writer.uint32(104).int32(message.timeSinceLastManualFormatSelectionMs);
    }
    if (message.lastManualDirection !== undefined) {
      writer.uint32(112).int32(message.lastManualDirection);
    }
    if (message.videoWidth !== undefined) {
      writer.uint32(128).int32(message.videoWidth);
    }
    if (message.detailedNetworkType !== undefined) {
      writer.uint32(136).int32(message.detailedNetworkType);
    }
    if (message.B7 !== undefined) {
      writer.uint32(144).int32(message.B7);
    }
    if (message.A7 !== undefined) {
      writer.uint32(152).int32(message.A7);
    }
    if (message.iea !== undefined) {
      writer.uint32(168).int32(message.iea);
    }
    if (message.r7 !== undefined) {
      writer.uint32(184).int32(message.r7);
    }
    if (message.startTimeMs !== undefined) {
      writer.uint32(224).int32(message.startTimeMs);
    }
    if (message.zea !== undefined) {
      writer.uint32(232).int32(message.zea);
    }
    if (message.visibility !== undefined) {
      writer.uint32(272).int32(message.visibility);
    }
    if (message.d8 !== undefined) {
      writer.uint32(288).int32(message.d8);
    }
    if (message.mediaCapabilities !== undefined) {
      MediaInfo_MediaCapabilities.encode(message.mediaCapabilities, writer.uint32(306).fork()).join();
    }
    if (message.yea !== undefined) {
      writer.uint32(312).int32(message.yea);
    }
    if (message.mediaType !== undefined) {
      writer.uint32(320).int32(message.mediaType);
    }
    if (message.playerState !== undefined) {
      writer.uint32(352).int32(message.playerState);
    }
    if (message.a8 !== undefined) {
      writer.uint32(368).bool(message.a8);
    }
    if (message.Jda !== undefined) {
      writer.uint32(384).int32(message.Jda);
    }
    if (message.qw !== undefined) {
      writer.uint32(400).int32(message.qw);
    }
    if (message.Ky !== undefined) {
      writer.uint32(408).int32(message.Ky);
    }
    if (message.Eq !== undefined) {
      writer.uint32(432).int32(message.Eq);
    }
    if (message.l !== undefined) {
      writer.uint32(448).bool(message.l);
    }
    if (message.G7 !== undefined) {
      writer.uint32(456).int32(message.G7);
    }
    if (message.No !== undefined) {
      writer.uint32(464).bool(message.No);
    }
    if (message.qj !== undefined) {
      writer.uint32(472).int32(message.qj);
    }
    if (message.Hx !== undefined) {
      writer.uint32(480).int32(message.Hx);
    }
    if (message.isPrefetch !== undefined) {
      writer.uint32(488).bool(message.isPrefetch);
    }
    if (message.Iz !== undefined) {
      writer.uint32(496).int32(message.Iz);
    }
    if (message.sabrLicenseConstraint !== undefined) {
      writer.uint32(506).bytes(message.sabrLicenseConstraint);
    }
    if (message.l2 !== undefined) {
      writer.uint32(512).int32(message.l2);
    }
    if (message.k2 !== undefined) {
      writer.uint32(528).int32(message.k2);
    }
    if (message.Tqb !== undefined) {
      writer.uint32(536).int32(message.Tqb);
    }
    if (message.c !== undefined) {
      writer.uint32(544).int32(message.c);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 13:
          if (tag !== 104) {
            break;
          }

          message.timeSinceLastManualFormatSelectionMs = reader.int32();
          continue;
        case 14:
          if (tag !== 112) {
            break;
          }

          message.lastManualDirection = reader.int32();
          continue;
        case 16:
          if (tag !== 128) {
            break;
          }

          message.videoWidth = reader.int32();
          continue;
        case 17:
          if (tag !== 136) {
            break;
          }

          message.detailedNetworkType = reader.int32();
          continue;
        case 18:
          if (tag !== 144) {
            break;
          }

          message.B7 = reader.int32();
          continue;
        case 19:
          if (tag !== 152) {
            break;
          }

          message.A7 = reader.int32();
          continue;
        case 21:
          if (tag !== 168) {
            break;
          }

          message.iea = reader.int32();
          continue;
        case 23:
          if (tag !== 184) {
            break;
          }

          message.r7 = reader.int32();
          continue;
        case 28:
          if (tag !== 224) {
            break;
          }

          message.startTimeMs = reader.int32();
          continue;
        case 29:
          if (tag !== 232) {
            break;
          }

          message.zea = reader.int32();
          continue;
        case 34:
          if (tag !== 272) {
            break;
          }

          message.visibility = reader.int32();
          continue;
        case 36:
          if (tag !== 288) {
            break;
          }

          message.d8 = reader.int32();
          continue;
        case 38:
          if (tag !== 306) {
            break;
          }

          message.mediaCapabilities = MediaInfo_MediaCapabilities.decode(reader, reader.uint32());
          continue;
        case 39:
          if (tag !== 312) {
            break;
          }

          message.yea = reader.int32();
          continue;
        case 40:
          if (tag !== 320) {
            break;
          }

          message.mediaType = reader.int32() as any;
          continue;
        case 44:
          if (tag !== 352) {
            break;
          }

          message.playerState = reader.int32();
          continue;
        case 46:
          if (tag !== 368) {
            break;
          }

          message.a8 = reader.bool();
          continue;
        case 48:
          if (tag !== 384) {
            break;
          }

          message.Jda = reader.int32();
          continue;
        case 50:
          if (tag !== 400) {
            break;
          }

          message.qw = reader.int32();
          continue;
        case 51:
          if (tag !== 408) {
            break;
          }

          message.Ky = reader.int32();
          continue;
        case 54:
          if (tag !== 432) {
            break;
          }

          message.Eq = reader.int32();
          continue;
        case 56:
          if (tag !== 448) {
            break;
          }

          message.l = reader.bool();
          continue;
        case 57:
          if (tag !== 456) {
            break;
          }

          message.G7 = reader.int32();
          continue;
        case 58:
          if (tag !== 464) {
            break;
          }

          message.No = reader.bool();
          continue;
        case 59:
          if (tag !== 472) {
            break;
          }

          message.qj = reader.int32();
          continue;
        case 60:
          if (tag !== 480) {
            break;
          }

          message.Hx = reader.int32();
          continue;
        case 61:
          if (tag !== 488) {
            break;
          }

          message.isPrefetch = reader.bool();
          continue;
        case 62:
          if (tag !== 496) {
            break;
          }

          message.Iz = reader.int32();
          continue;
        case 63:
          if (tag !== 506) {
            break;
          }

          message.sabrLicenseConstraint = reader.bytes();
          continue;
        case 64:
          if (tag !== 512) {
            break;
          }

          message.l2 = reader.int32();
          continue;
        case 66:
          if (tag !== 528) {
            break;
          }

          message.k2 = reader.int32();
          continue;
        case 67:
          if (tag !== 536) {
            break;
          }

          message.Tqb = reader.int32();
          continue;
        case 68:
          if (tag !== 544) {
            break;
          }

          message.c = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MediaInfo {
    return {
      timeSinceLastManualFormatSelectionMs: isSet(object.timeSinceLastManualFormatSelectionMs)
        ? globalThis.Number(object.timeSinceLastManualFormatSelectionMs)
        : undefined,
      lastManualDirection: isSet(object.lastManualDirection)
        ? globalThis.Number(object.lastManualDirection)
        : undefined,
      videoWidth: isSet(object.videoWidth) ? globalThis.Number(object.videoWidth) : undefined,
      detailedNetworkType: isSet(object.detailedNetworkType)
        ? globalThis.Number(object.detailedNetworkType)
        : undefined,
      B7: isSet(object.B7) ? globalThis.Number(object.B7) : undefined,
      A7: isSet(object.A7) ? globalThis.Number(object.A7) : undefined,
      iea: isSet(object.iea) ? globalThis.Number(object.iea) : undefined,
      r7: isSet(object.r7) ? globalThis.Number(object.r7) : undefined,
      startTimeMs: isSet(object.startTimeMs) ? globalThis.Number(object.startTimeMs) : undefined,
      zea: isSet(object.zea) ? globalThis.Number(object.zea) : undefined,
      visibility: isSet(object.visibility) ? globalThis.Number(object.visibility) : undefined,
      d8: isSet(object.d8) ? globalThis.Number(object.d8) : undefined,
      mediaCapabilities: isSet(object.mediaCapabilities)
        ? MediaInfo_MediaCapabilities.fromJSON(object.mediaCapabilities)
        : undefined,
      yea: isSet(object.yea) ? globalThis.Number(object.yea) : undefined,
      mediaType: isSet(object.mediaType) ? mediaInfo_MediaTypeFromJSON(object.mediaType) : undefined,
      playerState: isSet(object.playerState) ? globalThis.Number(object.playerState) : undefined,
      a8: isSet(object.a8) ? globalThis.Boolean(object.a8) : undefined,
      Jda: isSet(object.Jda) ? globalThis.Number(object.Jda) : undefined,
      qw: isSet(object.qw) ? globalThis.Number(object.qw) : undefined,
      Ky: isSet(object.Ky) ? globalThis.Number(object.Ky) : undefined,
      Eq: isSet(object.Eq) ? globalThis.Number(object.Eq) : undefined,
      l: isSet(object.l) ? globalThis.Boolean(object.l) : undefined,
      G7: isSet(object.G7) ? globalThis.Number(object.G7) : undefined,
      No: isSet(object.No) ? globalThis.Boolean(object.No) : undefined,
      qj: isSet(object.qj) ? globalThis.Number(object.qj) : undefined,
      Hx: isSet(object.Hx) ? globalThis.Number(object.Hx) : undefined,
      isPrefetch: isSet(object.isPrefetch) ? globalThis.Boolean(object.isPrefetch) : undefined,
      Iz: isSet(object.Iz) ? globalThis.Number(object.Iz) : undefined,
      sabrLicenseConstraint: isSet(object.sabrLicenseConstraint)
        ? bytesFromBase64(object.sabrLicenseConstraint)
        : undefined,
      l2: isSet(object.l2) ? globalThis.Number(object.l2) : undefined,
      k2: isSet(object.k2) ? globalThis.Number(object.k2) : undefined,
      Tqb: isSet(object.Tqb) ? globalThis.Number(object.Tqb) : undefined,
      c: isSet(object.c) ? globalThis.Number(object.c) : undefined,
    };
  },

  toJSON(message: MediaInfo): unknown {
    const obj: any = {};
    if (message.timeSinceLastManualFormatSelectionMs !== undefined) {
      obj.timeSinceLastManualFormatSelectionMs = Math.round(message.timeSinceLastManualFormatSelectionMs);
    }
    if (message.lastManualDirection !== undefined) {
      obj.lastManualDirection = Math.round(message.lastManualDirection);
    }
    if (message.videoWidth !== undefined) {
      obj.videoWidth = Math.round(message.videoWidth);
    }
    if (message.detailedNetworkType !== undefined) {
      obj.detailedNetworkType = Math.round(message.detailedNetworkType);
    }
    if (message.B7 !== undefined) {
      obj.B7 = Math.round(message.B7);
    }
    if (message.A7 !== undefined) {
      obj.A7 = Math.round(message.A7);
    }
    if (message.iea !== undefined) {
      obj.iea = Math.round(message.iea);
    }
    if (message.r7 !== undefined) {
      obj.r7 = Math.round(message.r7);
    }
    if (message.startTimeMs !== undefined) {
      obj.startTimeMs = Math.round(message.startTimeMs);
    }
    if (message.zea !== undefined) {
      obj.zea = Math.round(message.zea);
    }
    if (message.visibility !== undefined) {
      obj.visibility = Math.round(message.visibility);
    }
    if (message.d8 !== undefined) {
      obj.d8 = Math.round(message.d8);
    }
    if (message.mediaCapabilities !== undefined) {
      obj.mediaCapabilities = MediaInfo_MediaCapabilities.toJSON(message.mediaCapabilities);
    }
    if (message.yea !== undefined) {
      obj.yea = Math.round(message.yea);
    }
    if (message.mediaType !== undefined) {
      obj.mediaType = mediaInfo_MediaTypeToJSON(message.mediaType);
    }
    if (message.playerState !== undefined) {
      obj.playerState = Math.round(message.playerState);
    }
    if (message.a8 !== undefined) {
      obj.a8 = message.a8;
    }
    if (message.Jda !== undefined) {
      obj.Jda = Math.round(message.Jda);
    }
    if (message.qw !== undefined) {
      obj.qw = Math.round(message.qw);
    }
    if (message.Ky !== undefined) {
      obj.Ky = Math.round(message.Ky);
    }
    if (message.Eq !== undefined) {
      obj.Eq = Math.round(message.Eq);
    }
    if (message.l !== undefined) {
      obj.l = message.l;
    }
    if (message.G7 !== undefined) {
      obj.G7 = Math.round(message.G7);
    }
    if (message.No !== undefined) {
      obj.No = message.No;
    }
    if (message.qj !== undefined) {
      obj.qj = Math.round(message.qj);
    }
    if (message.Hx !== undefined) {
      obj.Hx = Math.round(message.Hx);
    }
    if (message.isPrefetch !== undefined) {
      obj.isPrefetch = message.isPrefetch;
    }
    if (message.Iz !== undefined) {
      obj.Iz = Math.round(message.Iz);
    }
    if (message.sabrLicenseConstraint !== undefined) {
      obj.sabrLicenseConstraint = base64FromBytes(message.sabrLicenseConstraint);
    }
    if (message.l2 !== undefined) {
      obj.l2 = Math.round(message.l2);
    }
    if (message.k2 !== undefined) {
      obj.k2 = Math.round(message.k2);
    }
    if (message.Tqb !== undefined) {
      obj.Tqb = Math.round(message.Tqb);
    }
    if (message.c !== undefined) {
      obj.c = Math.round(message.c);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaInfo>, I>>(base?: I): MediaInfo {
    return MediaInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaInfo>, I>>(object: I): MediaInfo {
    const message = createBaseMediaInfo();
    message.timeSinceLastManualFormatSelectionMs = object.timeSinceLastManualFormatSelectionMs ?? undefined;
    message.lastManualDirection = object.lastManualDirection ?? undefined;
    message.videoWidth = object.videoWidth ?? undefined;
    message.detailedNetworkType = object.detailedNetworkType ?? undefined;
    message.B7 = object.B7 ?? undefined;
    message.A7 = object.A7 ?? undefined;
    message.iea = object.iea ?? undefined;
    message.r7 = object.r7 ?? undefined;
    message.startTimeMs = object.startTimeMs ?? undefined;
    message.zea = object.zea ?? undefined;
    message.visibility = object.visibility ?? undefined;
    message.d8 = object.d8 ?? undefined;
    message.mediaCapabilities = (object.mediaCapabilities !== undefined && object.mediaCapabilities !== null)
      ? MediaInfo_MediaCapabilities.fromPartial(object.mediaCapabilities)
      : undefined;
    message.yea = object.yea ?? undefined;
    message.mediaType = object.mediaType ?? undefined;
    message.playerState = object.playerState ?? undefined;
    message.a8 = object.a8 ?? undefined;
    message.Jda = object.Jda ?? undefined;
    message.qw = object.qw ?? undefined;
    message.Ky = object.Ky ?? undefined;
    message.Eq = object.Eq ?? undefined;
    message.l = object.l ?? undefined;
    message.G7 = object.G7 ?? undefined;
    message.No = object.No ?? undefined;
    message.qj = object.qj ?? undefined;
    message.Hx = object.Hx ?? undefined;
    message.isPrefetch = object.isPrefetch ?? undefined;
    message.Iz = object.Iz ?? undefined;
    message.sabrLicenseConstraint = object.sabrLicenseConstraint ?? undefined;
    message.l2 = object.l2 ?? undefined;
    message.k2 = object.k2 ?? undefined;
    message.Tqb = object.Tqb ?? undefined;
    message.c = object.c ?? undefined;
    return message;
  },
};

function createBaseMediaInfo_MediaCapabilities(): MediaInfo_MediaCapabilities {
  return { videoFormatCapabilities: [], audioFormatCapabilities: [], hdrModeBitmask: undefined };
}

export const MediaInfo_MediaCapabilities: MessageFns<MediaInfo_MediaCapabilities> = {
  encode(message: MediaInfo_MediaCapabilities, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.videoFormatCapabilities) {
      MediaInfo_MediaCapabilities_VideoFormatCapability.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.audioFormatCapabilities) {
      MediaInfo_MediaCapabilities_AudioFormatCapability.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.hdrModeBitmask !== undefined) {
      writer.uint32(40).int32(message.hdrModeBitmask);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaInfo_MediaCapabilities {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaInfo_MediaCapabilities();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.videoFormatCapabilities.push(
            MediaInfo_MediaCapabilities_VideoFormatCapability.decode(reader, reader.uint32()),
          );
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.audioFormatCapabilities.push(
            MediaInfo_MediaCapabilities_AudioFormatCapability.decode(reader, reader.uint32()),
          );
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.hdrModeBitmask = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MediaInfo_MediaCapabilities {
    return {
      videoFormatCapabilities: globalThis.Array.isArray(object?.videoFormatCapabilities)
        ? object.videoFormatCapabilities.map((e: any) => MediaInfo_MediaCapabilities_VideoFormatCapability.fromJSON(e))
        : [],
      audioFormatCapabilities: globalThis.Array.isArray(object?.audioFormatCapabilities)
        ? object.audioFormatCapabilities.map((e: any) => MediaInfo_MediaCapabilities_AudioFormatCapability.fromJSON(e))
        : [],
      hdrModeBitmask: isSet(object.hdrModeBitmask) ? globalThis.Number(object.hdrModeBitmask) : undefined,
    };
  },

  toJSON(message: MediaInfo_MediaCapabilities): unknown {
    const obj: any = {};
    if (message.videoFormatCapabilities?.length) {
      obj.videoFormatCapabilities = message.videoFormatCapabilities.map((e) =>
        MediaInfo_MediaCapabilities_VideoFormatCapability.toJSON(e)
      );
    }
    if (message.audioFormatCapabilities?.length) {
      obj.audioFormatCapabilities = message.audioFormatCapabilities.map((e) =>
        MediaInfo_MediaCapabilities_AudioFormatCapability.toJSON(e)
      );
    }
    if (message.hdrModeBitmask !== undefined) {
      obj.hdrModeBitmask = Math.round(message.hdrModeBitmask);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaInfo_MediaCapabilities>, I>>(base?: I): MediaInfo_MediaCapabilities {
    return MediaInfo_MediaCapabilities.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaInfo_MediaCapabilities>, I>>(object: I): MediaInfo_MediaCapabilities {
    const message = createBaseMediaInfo_MediaCapabilities();
    message.videoFormatCapabilities =
      object.videoFormatCapabilities?.map((e) => MediaInfo_MediaCapabilities_VideoFormatCapability.fromPartial(e)) ||
      [];
    message.audioFormatCapabilities =
      object.audioFormatCapabilities?.map((e) => MediaInfo_MediaCapabilities_AudioFormatCapability.fromPartial(e)) ||
      [];
    message.hdrModeBitmask = object.hdrModeBitmask ?? undefined;
    return message;
  },
};

function createBaseMediaInfo_MediaCapabilities_VideoFormatCapability(): MediaInfo_MediaCapabilities_VideoFormatCapability {
  return {
    videoCodec: undefined,
    maxHeight: undefined,
    maxWidth: undefined,
    maxFramerate: undefined,
    maxBitrateBps: undefined,
    is10BitSupported: undefined,
  };
}

export const MediaInfo_MediaCapabilities_VideoFormatCapability: MessageFns<
  MediaInfo_MediaCapabilities_VideoFormatCapability
> = {
  encode(
    message: MediaInfo_MediaCapabilities_VideoFormatCapability,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.videoCodec !== undefined) {
      writer.uint32(8).int32(message.videoCodec);
    }
    if (message.maxHeight !== undefined) {
      writer.uint32(24).int32(message.maxHeight);
    }
    if (message.maxWidth !== undefined) {
      writer.uint32(32).int32(message.maxWidth);
    }
    if (message.maxFramerate !== undefined) {
      writer.uint32(88).int32(message.maxFramerate);
    }
    if (message.maxBitrateBps !== undefined) {
      writer.uint32(96).int32(message.maxBitrateBps);
    }
    if (message.is10BitSupported !== undefined) {
      writer.uint32(120).bool(message.is10BitSupported);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaInfo_MediaCapabilities_VideoFormatCapability {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaInfo_MediaCapabilities_VideoFormatCapability();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.videoCodec = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.maxHeight = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.maxWidth = reader.int32();
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.maxFramerate = reader.int32();
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.maxBitrateBps = reader.int32();
          continue;
        case 15:
          if (tag !== 120) {
            break;
          }

          message.is10BitSupported = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MediaInfo_MediaCapabilities_VideoFormatCapability {
    return {
      videoCodec: isSet(object.videoCodec) ? globalThis.Number(object.videoCodec) : undefined,
      maxHeight: isSet(object.maxHeight) ? globalThis.Number(object.maxHeight) : undefined,
      maxWidth: isSet(object.maxWidth) ? globalThis.Number(object.maxWidth) : undefined,
      maxFramerate: isSet(object.maxFramerate) ? globalThis.Number(object.maxFramerate) : undefined,
      maxBitrateBps: isSet(object.maxBitrateBps) ? globalThis.Number(object.maxBitrateBps) : undefined,
      is10BitSupported: isSet(object.is10BitSupported) ? globalThis.Boolean(object.is10BitSupported) : undefined,
    };
  },

  toJSON(message: MediaInfo_MediaCapabilities_VideoFormatCapability): unknown {
    const obj: any = {};
    if (message.videoCodec !== undefined) {
      obj.videoCodec = Math.round(message.videoCodec);
    }
    if (message.maxHeight !== undefined) {
      obj.maxHeight = Math.round(message.maxHeight);
    }
    if (message.maxWidth !== undefined) {
      obj.maxWidth = Math.round(message.maxWidth);
    }
    if (message.maxFramerate !== undefined) {
      obj.maxFramerate = Math.round(message.maxFramerate);
    }
    if (message.maxBitrateBps !== undefined) {
      obj.maxBitrateBps = Math.round(message.maxBitrateBps);
    }
    if (message.is10BitSupported !== undefined) {
      obj.is10BitSupported = message.is10BitSupported;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaInfo_MediaCapabilities_VideoFormatCapability>, I>>(
    base?: I,
  ): MediaInfo_MediaCapabilities_VideoFormatCapability {
    return MediaInfo_MediaCapabilities_VideoFormatCapability.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaInfo_MediaCapabilities_VideoFormatCapability>, I>>(
    object: I,
  ): MediaInfo_MediaCapabilities_VideoFormatCapability {
    const message = createBaseMediaInfo_MediaCapabilities_VideoFormatCapability();
    message.videoCodec = object.videoCodec ?? undefined;
    message.maxHeight = object.maxHeight ?? undefined;
    message.maxWidth = object.maxWidth ?? undefined;
    message.maxFramerate = object.maxFramerate ?? undefined;
    message.maxBitrateBps = object.maxBitrateBps ?? undefined;
    message.is10BitSupported = object.is10BitSupported ?? undefined;
    return message;
  },
};

function createBaseMediaInfo_MediaCapabilities_AudioFormatCapability(): MediaInfo_MediaCapabilities_AudioFormatCapability {
  return {
    audioCodec: undefined,
    numChannels: undefined,
    maxBitrateBps: undefined,
    spatialCapabilityBitmask: undefined,
  };
}

export const MediaInfo_MediaCapabilities_AudioFormatCapability: MessageFns<
  MediaInfo_MediaCapabilities_AudioFormatCapability
> = {
  encode(
    message: MediaInfo_MediaCapabilities_AudioFormatCapability,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.audioCodec !== undefined) {
      writer.uint32(8).int32(message.audioCodec);
    }
    if (message.numChannels !== undefined) {
      writer.uint32(16).int32(message.numChannels);
    }
    if (message.maxBitrateBps !== undefined) {
      writer.uint32(24).int32(message.maxBitrateBps);
    }
    if (message.spatialCapabilityBitmask !== undefined) {
      writer.uint32(48).int32(message.spatialCapabilityBitmask);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaInfo_MediaCapabilities_AudioFormatCapability {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaInfo_MediaCapabilities_AudioFormatCapability();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.audioCodec = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.numChannels = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.maxBitrateBps = reader.int32();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.spatialCapabilityBitmask = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MediaInfo_MediaCapabilities_AudioFormatCapability {
    return {
      audioCodec: isSet(object.audioCodec) ? globalThis.Number(object.audioCodec) : undefined,
      numChannels: isSet(object.numChannels) ? globalThis.Number(object.numChannels) : undefined,
      maxBitrateBps: isSet(object.maxBitrateBps) ? globalThis.Number(object.maxBitrateBps) : undefined,
      spatialCapabilityBitmask: isSet(object.spatialCapabilityBitmask)
        ? globalThis.Number(object.spatialCapabilityBitmask)
        : undefined,
    };
  },

  toJSON(message: MediaInfo_MediaCapabilities_AudioFormatCapability): unknown {
    const obj: any = {};
    if (message.audioCodec !== undefined) {
      obj.audioCodec = Math.round(message.audioCodec);
    }
    if (message.numChannels !== undefined) {
      obj.numChannels = Math.round(message.numChannels);
    }
    if (message.maxBitrateBps !== undefined) {
      obj.maxBitrateBps = Math.round(message.maxBitrateBps);
    }
    if (message.spatialCapabilityBitmask !== undefined) {
      obj.spatialCapabilityBitmask = Math.round(message.spatialCapabilityBitmask);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaInfo_MediaCapabilities_AudioFormatCapability>, I>>(
    base?: I,
  ): MediaInfo_MediaCapabilities_AudioFormatCapability {
    return MediaInfo_MediaCapabilities_AudioFormatCapability.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaInfo_MediaCapabilities_AudioFormatCapability>, I>>(
    object: I,
  ): MediaInfo_MediaCapabilities_AudioFormatCapability {
    const message = createBaseMediaInfo_MediaCapabilities_AudioFormatCapability();
    message.audioCodec = object.audioCodec ?? undefined;
    message.numChannels = object.numChannels ?? undefined;
    message.maxBitrateBps = object.maxBitrateBps ?? undefined;
    message.spatialCapabilityBitmask = object.spatialCapabilityBitmask ?? undefined;
    return message;
  },
};

function createBaseLo(): Lo {
  return { formatId: undefined, Lj: undefined, sequenceNumber: undefined, field4: undefined, MZ: undefined };
}

export const Lo: MessageFns<Lo> = {
  encode(message: Lo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.formatId !== undefined) {
      FormatId.encode(message.formatId, writer.uint32(10).fork()).join();
    }
    if (message.Lj !== undefined) {
      writer.uint32(16).int32(message.Lj);
    }
    if (message.sequenceNumber !== undefined) {
      writer.uint32(24).int32(message.sequenceNumber);
    }
    if (message.field4 !== undefined) {
      Lo_Field4.encode(message.field4, writer.uint32(34).fork()).join();
    }
    if (message.MZ !== undefined) {
      writer.uint32(40).int32(message.MZ);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Lo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.formatId = FormatId.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.Lj = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.sequenceNumber = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.field4 = Lo_Field4.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.MZ = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Lo {
    return {
      formatId: isSet(object.formatId) ? FormatId.fromJSON(object.formatId) : undefined,
      Lj: isSet(object.Lj) ? globalThis.Number(object.Lj) : undefined,
      sequenceNumber: isSet(object.sequenceNumber) ? globalThis.Number(object.sequenceNumber) : undefined,
      field4: isSet(object.field4) ? Lo_Field4.fromJSON(object.field4) : undefined,
      MZ: isSet(object.MZ) ? globalThis.Number(object.MZ) : undefined,
    };
  },

  toJSON(message: Lo): unknown {
    const obj: any = {};
    if (message.formatId !== undefined) {
      obj.formatId = FormatId.toJSON(message.formatId);
    }
    if (message.Lj !== undefined) {
      obj.Lj = Math.round(message.Lj);
    }
    if (message.sequenceNumber !== undefined) {
      obj.sequenceNumber = Math.round(message.sequenceNumber);
    }
    if (message.field4 !== undefined) {
      obj.field4 = Lo_Field4.toJSON(message.field4);
    }
    if (message.MZ !== undefined) {
      obj.MZ = Math.round(message.MZ);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Lo>, I>>(base?: I): Lo {
    return Lo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Lo>, I>>(object: I): Lo {
    const message = createBaseLo();
    message.formatId = (object.formatId !== undefined && object.formatId !== null)
      ? FormatId.fromPartial(object.formatId)
      : undefined;
    message.Lj = object.Lj ?? undefined;
    message.sequenceNumber = object.sequenceNumber ?? undefined;
    message.field4 = (object.field4 !== undefined && object.field4 !== null)
      ? Lo_Field4.fromPartial(object.field4)
      : undefined;
    message.MZ = object.MZ ?? undefined;
    return message;
  },
};

function createBaseLo_Field4(): Lo_Field4 {
  return { field1: undefined, field2: undefined, field3: undefined };
}

export const Lo_Field4: MessageFns<Lo_Field4> = {
  encode(message: Lo_Field4, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.field1 !== undefined) {
      writer.uint32(8).int32(message.field1);
    }
    if (message.field2 !== undefined) {
      writer.uint32(16).int32(message.field2);
    }
    if (message.field3 !== undefined) {
      writer.uint32(24).int32(message.field3);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Lo_Field4 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLo_Field4();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.field1 = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.field2 = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.field3 = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Lo_Field4 {
    return {
      field1: isSet(object.field1) ? globalThis.Number(object.field1) : undefined,
      field2: isSet(object.field2) ? globalThis.Number(object.field2) : undefined,
      field3: isSet(object.field3) ? globalThis.Number(object.field3) : undefined,
    };
  },

  toJSON(message: Lo_Field4): unknown {
    const obj: any = {};
    if (message.field1 !== undefined) {
      obj.field1 = Math.round(message.field1);
    }
    if (message.field2 !== undefined) {
      obj.field2 = Math.round(message.field2);
    }
    if (message.field3 !== undefined) {
      obj.field3 = Math.round(message.field3);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Lo_Field4>, I>>(base?: I): Lo_Field4 {
    return Lo_Field4.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Lo_Field4>, I>>(object: I): Lo_Field4 {
    const message = createBaseLo_Field4();
    message.field1 = object.field1 ?? undefined;
    message.field2 = object.field2 ?? undefined;
    message.field3 = object.field3 ?? undefined;
    return message;
  },
};

function createBaseKob(): Kob {
  return { EW: [] };
}

export const Kob: MessageFns<Kob> = {
  encode(message: Kob, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.EW) {
      Kob_Pa.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Kob {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKob();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.EW.push(Kob_Pa.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Kob {
    return { EW: globalThis.Array.isArray(object?.EW) ? object.EW.map((e: any) => Kob_Pa.fromJSON(e)) : [] };
  },

  toJSON(message: Kob): unknown {
    const obj: any = {};
    if (message.EW?.length) {
      obj.EW = message.EW.map((e) => Kob_Pa.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Kob>, I>>(base?: I): Kob {
    return Kob.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Kob>, I>>(object: I): Kob {
    const message = createBaseKob();
    message.EW = object.EW?.map((e) => Kob_Pa.fromPartial(e)) || [];
    return message;
  },
};

function createBaseKob_Pa(): Kob_Pa {
  return { videoId: undefined, lmt: undefined };
}

export const Kob_Pa: MessageFns<Kob_Pa> = {
  encode(message: Kob_Pa, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.videoId !== undefined) {
      writer.uint32(10).string(message.videoId);
    }
    if (message.lmt !== undefined) {
      writer.uint32(16).uint64(message.lmt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Kob_Pa {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKob_Pa();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.videoId = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.lmt = longToNumber(reader.uint64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Kob_Pa {
    return {
      videoId: isSet(object.videoId) ? globalThis.String(object.videoId) : undefined,
      lmt: isSet(object.lmt) ? globalThis.Number(object.lmt) : undefined,
    };
  },

  toJSON(message: Kob_Pa): unknown {
    const obj: any = {};
    if (message.videoId !== undefined) {
      obj.videoId = message.videoId;
    }
    if (message.lmt !== undefined) {
      obj.lmt = Math.round(message.lmt);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Kob_Pa>, I>>(base?: I): Kob_Pa {
    return Kob_Pa.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Kob_Pa>, I>>(object: I): Kob_Pa {
    const message = createBaseKob_Pa();
    message.videoId = object.videoId ?? undefined;
    message.lmt = object.lmt ?? undefined;
    return message;
  },
};

function createBaseYPa(): YPa {
  return { field1: undefined, field2: undefined, field3: undefined };
}

export const YPa: MessageFns<YPa> = {
  encode(message: YPa, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.field1 !== undefined) {
      writer.uint32(8).int32(message.field1);
    }
    if (message.field2 !== undefined) {
      writer.uint32(16).int32(message.field2);
    }
    if (message.field3 !== undefined) {
      writer.uint32(24).int32(message.field3);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): YPa {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseYPa();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.field1 = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.field2 = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.field3 = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): YPa {
    return {
      field1: isSet(object.field1) ? globalThis.Number(object.field1) : undefined,
      field2: isSet(object.field2) ? globalThis.Number(object.field2) : undefined,
      field3: isSet(object.field3) ? globalThis.Number(object.field3) : undefined,
    };
  },

  toJSON(message: YPa): unknown {
    const obj: any = {};
    if (message.field1 !== undefined) {
      obj.field1 = Math.round(message.field1);
    }
    if (message.field2 !== undefined) {
      obj.field2 = Math.round(message.field2);
    }
    if (message.field3 !== undefined) {
      obj.field3 = Math.round(message.field3);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<YPa>, I>>(base?: I): YPa {
    return YPa.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<YPa>, I>>(object: I): YPa {
    const message = createBaseYPa();
    message.field1 = object.field1 ?? undefined;
    message.field2 = object.field2 ?? undefined;
    message.field3 = object.field3 ?? undefined;
    return message;
  },
};

function createBaseZpa(): Zpa {
  return {
    formatId: undefined,
    startTimeMs: 0,
    durationMs: 0,
    field4: 0,
    field5: 0,
    field9: undefined,
    field11: undefined,
    field12: undefined,
  };
}

export const Zpa: MessageFns<Zpa> = {
  encode(message: Zpa, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.formatId !== undefined) {
      FormatId.encode(message.formatId, writer.uint32(10).fork()).join();
    }
    if (message.startTimeMs !== 0) {
      writer.uint32(16).int32(message.startTimeMs);
    }
    if (message.durationMs !== 0) {
      writer.uint32(24).int32(message.durationMs);
    }
    if (message.field4 !== 0) {
      writer.uint32(32).int32(message.field4);
    }
    if (message.field5 !== 0) {
      writer.uint32(40).int32(message.field5);
    }
    if (message.field9 !== undefined) {
      Kob.encode(message.field9, writer.uint32(74).fork()).join();
    }
    if (message.field11 !== undefined) {
      YPa.encode(message.field11, writer.uint32(90).fork()).join();
    }
    if (message.field12 !== undefined) {
      YPa.encode(message.field12, writer.uint32(98).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Zpa {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseZpa();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.formatId = FormatId.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.startTimeMs = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.durationMs = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.field4 = reader.int32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.field5 = reader.int32();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.field9 = Kob.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.field11 = YPa.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.field12 = YPa.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Zpa {
    return {
      formatId: isSet(object.formatId) ? FormatId.fromJSON(object.formatId) : undefined,
      startTimeMs: isSet(object.startTimeMs) ? globalThis.Number(object.startTimeMs) : 0,
      durationMs: isSet(object.durationMs) ? globalThis.Number(object.durationMs) : 0,
      field4: isSet(object.field4) ? globalThis.Number(object.field4) : 0,
      field5: isSet(object.field5) ? globalThis.Number(object.field5) : 0,
      field9: isSet(object.field9) ? Kob.fromJSON(object.field9) : undefined,
      field11: isSet(object.field11) ? YPa.fromJSON(object.field11) : undefined,
      field12: isSet(object.field12) ? YPa.fromJSON(object.field12) : undefined,
    };
  },

  toJSON(message: Zpa): unknown {
    const obj: any = {};
    if (message.formatId !== undefined) {
      obj.formatId = FormatId.toJSON(message.formatId);
    }
    if (message.startTimeMs !== 0) {
      obj.startTimeMs = Math.round(message.startTimeMs);
    }
    if (message.durationMs !== 0) {
      obj.durationMs = Math.round(message.durationMs);
    }
    if (message.field4 !== 0) {
      obj.field4 = Math.round(message.field4);
    }
    if (message.field5 !== 0) {
      obj.field5 = Math.round(message.field5);
    }
    if (message.field9 !== undefined) {
      obj.field9 = Kob.toJSON(message.field9);
    }
    if (message.field11 !== undefined) {
      obj.field11 = YPa.toJSON(message.field11);
    }
    if (message.field12 !== undefined) {
      obj.field12 = YPa.toJSON(message.field12);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Zpa>, I>>(base?: I): Zpa {
    return Zpa.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Zpa>, I>>(object: I): Zpa {
    const message = createBaseZpa();
    message.formatId = (object.formatId !== undefined && object.formatId !== null)
      ? FormatId.fromPartial(object.formatId)
      : undefined;
    message.startTimeMs = object.startTimeMs ?? 0;
    message.durationMs = object.durationMs ?? 0;
    message.field4 = object.field4 ?? 0;
    message.field5 = object.field5 ?? 0;
    message.field9 = (object.field9 !== undefined && object.field9 !== null)
      ? Kob.fromPartial(object.field9)
      : undefined;
    message.field11 = (object.field11 !== undefined && object.field11 !== null)
      ? YPa.fromPartial(object.field11)
      : undefined;
    message.field12 = (object.field12 !== undefined && object.field12 !== null)
      ? YPa.fromPartial(object.field12)
      : undefined;
    return message;
  },
};

function createBaseUpa(): Upa {
  return {
    clientInfo: undefined,
    poToken: undefined,
    playbackCookie: undefined,
    gp: undefined,
    field5: [],
    field6: [],
    field7: undefined,
    field8: undefined,
  };
}

export const Upa: MessageFns<Upa> = {
  encode(message: Upa, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.clientInfo !== undefined) {
      Upa_ClientInfo.encode(message.clientInfo, writer.uint32(10).fork()).join();
    }
    if (message.poToken !== undefined) {
      writer.uint32(18).bytes(message.poToken);
    }
    if (message.playbackCookie !== undefined) {
      writer.uint32(26).bytes(message.playbackCookie);
    }
    if (message.gp !== undefined) {
      writer.uint32(34).bytes(message.gp);
    }
    for (const v of message.field5) {
      Upa_Fqa.encode(v!, writer.uint32(42).fork()).join();
    }
    writer.uint32(50).fork();
    for (const v of message.field6) {
      writer.int32(v);
    }
    writer.join();
    if (message.field7 !== undefined) {
      writer.uint32(58).string(message.field7);
    }
    if (message.field8 !== undefined) {
      Upa_Gqa.encode(message.field8, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Upa {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpa();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.clientInfo = Upa_ClientInfo.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.poToken = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.playbackCookie = reader.bytes();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.gp = reader.bytes();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.field5.push(Upa_Fqa.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag === 48) {
            message.field6.push(reader.int32());

            continue;
          }

          if (tag === 50) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.field6.push(reader.int32());
            }

            continue;
          }

          break;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.field7 = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.field8 = Upa_Gqa.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Upa {
    return {
      clientInfo: isSet(object.clientInfo) ? Upa_ClientInfo.fromJSON(object.clientInfo) : undefined,
      poToken: isSet(object.poToken) ? bytesFromBase64(object.poToken) : undefined,
      playbackCookie: isSet(object.playbackCookie) ? bytesFromBase64(object.playbackCookie) : undefined,
      gp: isSet(object.gp) ? bytesFromBase64(object.gp) : undefined,
      field5: globalThis.Array.isArray(object?.field5) ? object.field5.map((e: any) => Upa_Fqa.fromJSON(e)) : [],
      field6: globalThis.Array.isArray(object?.field6) ? object.field6.map((e: any) => globalThis.Number(e)) : [],
      field7: isSet(object.field7) ? globalThis.String(object.field7) : undefined,
      field8: isSet(object.field8) ? Upa_Gqa.fromJSON(object.field8) : undefined,
    };
  },

  toJSON(message: Upa): unknown {
    const obj: any = {};
    if (message.clientInfo !== undefined) {
      obj.clientInfo = Upa_ClientInfo.toJSON(message.clientInfo);
    }
    if (message.poToken !== undefined) {
      obj.poToken = base64FromBytes(message.poToken);
    }
    if (message.playbackCookie !== undefined) {
      obj.playbackCookie = base64FromBytes(message.playbackCookie);
    }
    if (message.gp !== undefined) {
      obj.gp = base64FromBytes(message.gp);
    }
    if (message.field5?.length) {
      obj.field5 = message.field5.map((e) => Upa_Fqa.toJSON(e));
    }
    if (message.field6?.length) {
      obj.field6 = message.field6.map((e) => Math.round(e));
    }
    if (message.field7 !== undefined) {
      obj.field7 = message.field7;
    }
    if (message.field8 !== undefined) {
      obj.field8 = Upa_Gqa.toJSON(message.field8);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Upa>, I>>(base?: I): Upa {
    return Upa.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Upa>, I>>(object: I): Upa {
    const message = createBaseUpa();
    message.clientInfo = (object.clientInfo !== undefined && object.clientInfo !== null)
      ? Upa_ClientInfo.fromPartial(object.clientInfo)
      : undefined;
    message.poToken = object.poToken ?? undefined;
    message.playbackCookie = object.playbackCookie ?? undefined;
    message.gp = object.gp ?? undefined;
    message.field5 = object.field5?.map((e) => Upa_Fqa.fromPartial(e)) || [];
    message.field6 = object.field6?.map((e) => e) || [];
    message.field7 = object.field7 ?? undefined;
    message.field8 = (object.field8 !== undefined && object.field8 !== null)
      ? Upa_Gqa.fromPartial(object.field8)
      : undefined;
    return message;
  },
};

function createBaseUpa_ClientInfo(): Upa_ClientInfo {
  return {
    deviceMake: undefined,
    deviceModel: undefined,
    clientName: undefined,
    clientVersion: undefined,
    osName: undefined,
    osVersion: undefined,
  };
}

export const Upa_ClientInfo: MessageFns<Upa_ClientInfo> = {
  encode(message: Upa_ClientInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.deviceMake !== undefined) {
      writer.uint32(98).string(message.deviceMake);
    }
    if (message.deviceModel !== undefined) {
      writer.uint32(106).string(message.deviceModel);
    }
    if (message.clientName !== undefined) {
      writer.uint32(128).int32(message.clientName);
    }
    if (message.clientVersion !== undefined) {
      writer.uint32(138).string(message.clientVersion);
    }
    if (message.osName !== undefined) {
      writer.uint32(146).string(message.osName);
    }
    if (message.osVersion !== undefined) {
      writer.uint32(154).string(message.osVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Upa_ClientInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpa_ClientInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 12:
          if (tag !== 98) {
            break;
          }

          message.deviceMake = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.deviceModel = reader.string();
          continue;
        case 16:
          if (tag !== 128) {
            break;
          }

          message.clientName = reader.int32();
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.clientVersion = reader.string();
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.osName = reader.string();
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.osVersion = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Upa_ClientInfo {
    return {
      deviceMake: isSet(object.deviceMake) ? globalThis.String(object.deviceMake) : undefined,
      deviceModel: isSet(object.deviceModel) ? globalThis.String(object.deviceModel) : undefined,
      clientName: isSet(object.clientName) ? globalThis.Number(object.clientName) : undefined,
      clientVersion: isSet(object.clientVersion) ? globalThis.String(object.clientVersion) : undefined,
      osName: isSet(object.osName) ? globalThis.String(object.osName) : undefined,
      osVersion: isSet(object.osVersion) ? globalThis.String(object.osVersion) : undefined,
    };
  },

  toJSON(message: Upa_ClientInfo): unknown {
    const obj: any = {};
    if (message.deviceMake !== undefined) {
      obj.deviceMake = message.deviceMake;
    }
    if (message.deviceModel !== undefined) {
      obj.deviceModel = message.deviceModel;
    }
    if (message.clientName !== undefined) {
      obj.clientName = Math.round(message.clientName);
    }
    if (message.clientVersion !== undefined) {
      obj.clientVersion = message.clientVersion;
    }
    if (message.osName !== undefined) {
      obj.osName = message.osName;
    }
    if (message.osVersion !== undefined) {
      obj.osVersion = message.osVersion;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Upa_ClientInfo>, I>>(base?: I): Upa_ClientInfo {
    return Upa_ClientInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Upa_ClientInfo>, I>>(object: I): Upa_ClientInfo {
    const message = createBaseUpa_ClientInfo();
    message.deviceMake = object.deviceMake ?? undefined;
    message.deviceModel = object.deviceModel ?? undefined;
    message.clientName = object.clientName ?? undefined;
    message.clientVersion = object.clientVersion ?? undefined;
    message.osName = object.osName ?? undefined;
    message.osVersion = object.osVersion ?? undefined;
    return message;
  },
};

function createBaseUpa_Fqa(): Upa_Fqa {
  return { type: undefined, value: undefined };
}

export const Upa_Fqa: MessageFns<Upa_Fqa> = {
  encode(message: Upa_Fqa, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== undefined) {
      writer.uint32(8).int32(message.type);
    }
    if (message.value !== undefined) {
      writer.uint32(18).bytes(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Upa_Fqa {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpa_Fqa();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Upa_Fqa {
    return {
      type: isSet(object.type) ? globalThis.Number(object.type) : undefined,
      value: isSet(object.value) ? bytesFromBase64(object.value) : undefined,
    };
  },

  toJSON(message: Upa_Fqa): unknown {
    const obj: any = {};
    if (message.type !== undefined) {
      obj.type = Math.round(message.type);
    }
    if (message.value !== undefined) {
      obj.value = base64FromBytes(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Upa_Fqa>, I>>(base?: I): Upa_Fqa {
    return Upa_Fqa.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Upa_Fqa>, I>>(object: I): Upa_Fqa {
    const message = createBaseUpa_Fqa();
    message.type = object.type ?? undefined;
    message.value = object.value ?? undefined;
    return message;
  },
};

function createBaseUpa_Gqa(): Upa_Gqa {
  return { field1: undefined, field2: undefined };
}

export const Upa_Gqa: MessageFns<Upa_Gqa> = {
  encode(message: Upa_Gqa, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.field1 !== undefined) {
      writer.uint32(10).bytes(message.field1);
    }
    if (message.field2 !== undefined) {
      Upa_Gqa_Hqa.encode(message.field2, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Upa_Gqa {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpa_Gqa();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.field1 = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.field2 = Upa_Gqa_Hqa.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Upa_Gqa {
    return {
      field1: isSet(object.field1) ? bytesFromBase64(object.field1) : undefined,
      field2: isSet(object.field2) ? Upa_Gqa_Hqa.fromJSON(object.field2) : undefined,
    };
  },

  toJSON(message: Upa_Gqa): unknown {
    const obj: any = {};
    if (message.field1 !== undefined) {
      obj.field1 = base64FromBytes(message.field1);
    }
    if (message.field2 !== undefined) {
      obj.field2 = Upa_Gqa_Hqa.toJSON(message.field2);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Upa_Gqa>, I>>(base?: I): Upa_Gqa {
    return Upa_Gqa.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Upa_Gqa>, I>>(object: I): Upa_Gqa {
    const message = createBaseUpa_Gqa();
    message.field1 = object.field1 ?? undefined;
    message.field2 = (object.field2 !== undefined && object.field2 !== null)
      ? Upa_Gqa_Hqa.fromPartial(object.field2)
      : undefined;
    return message;
  },
};

function createBaseUpa_Gqa_Hqa(): Upa_Gqa_Hqa {
  return { code: undefined, message: undefined };
}

export const Upa_Gqa_Hqa: MessageFns<Upa_Gqa_Hqa> = {
  encode(message: Upa_Gqa_Hqa, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== undefined) {
      writer.uint32(8).int32(message.code);
    }
    if (message.message !== undefined) {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Upa_Gqa_Hqa {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpa_Gqa_Hqa();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Upa_Gqa_Hqa {
    return {
      code: isSet(object.code) ? globalThis.Number(object.code) : undefined,
      message: isSet(object.message) ? globalThis.String(object.message) : undefined,
    };
  },

  toJSON(message: Upa_Gqa_Hqa): unknown {
    const obj: any = {};
    if (message.code !== undefined) {
      obj.code = Math.round(message.code);
    }
    if (message.message !== undefined) {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Upa_Gqa_Hqa>, I>>(base?: I): Upa_Gqa_Hqa {
    return Upa_Gqa_Hqa.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Upa_Gqa_Hqa>, I>>(object: I): Upa_Gqa_Hqa {
    const message = createBaseUpa_Gqa_Hqa();
    message.code = object.code ?? undefined;
    message.message = object.message ?? undefined;
    return message;
  },
};

function createBaseOQa(): OQa {
  return { field1: [], field2: undefined, field3: undefined, field4: undefined, field5: undefined, field6: undefined };
}

export const OQa: MessageFns<OQa> = {
  encode(message: OQa, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.field1) {
      writer.uint32(10).string(v!);
    }
    if (message.field2 !== undefined) {
      writer.uint32(18).bytes(message.field2);
    }
    if (message.field3 !== undefined) {
      writer.uint32(26).string(message.field3);
    }
    if (message.field4 !== undefined) {
      writer.uint32(32).int32(message.field4);
    }
    if (message.field5 !== undefined) {
      writer.uint32(40).int32(message.field5);
    }
    if (message.field6 !== undefined) {
      writer.uint32(50).string(message.field6);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OQa {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOQa();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.field1.push(reader.string());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.field2 = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.field3 = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.field4 = reader.int32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.field5 = reader.int32();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.field6 = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OQa {
    return {
      field1: globalThis.Array.isArray(object?.field1) ? object.field1.map((e: any) => globalThis.String(e)) : [],
      field2: isSet(object.field2) ? bytesFromBase64(object.field2) : undefined,
      field3: isSet(object.field3) ? globalThis.String(object.field3) : undefined,
      field4: isSet(object.field4) ? globalThis.Number(object.field4) : undefined,
      field5: isSet(object.field5) ? globalThis.Number(object.field5) : undefined,
      field6: isSet(object.field6) ? globalThis.String(object.field6) : undefined,
    };
  },

  toJSON(message: OQa): unknown {
    const obj: any = {};
    if (message.field1?.length) {
      obj.field1 = message.field1;
    }
    if (message.field2 !== undefined) {
      obj.field2 = base64FromBytes(message.field2);
    }
    if (message.field3 !== undefined) {
      obj.field3 = message.field3;
    }
    if (message.field4 !== undefined) {
      obj.field4 = Math.round(message.field4);
    }
    if (message.field5 !== undefined) {
      obj.field5 = Math.round(message.field5);
    }
    if (message.field6 !== undefined) {
      obj.field6 = message.field6;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OQa>, I>>(base?: I): OQa {
    return OQa.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OQa>, I>>(object: I): OQa {
    const message = createBaseOQa();
    message.field1 = object.field1?.map((e) => e) || [];
    message.field2 = object.field2 ?? undefined;
    message.field3 = object.field3 ?? undefined;
    message.field4 = object.field4 ?? undefined;
    message.field5 = object.field5 ?? undefined;
    message.field6 = object.field6 ?? undefined;
    return message;
  },
};

function createBasePqa(): Pqa {
  return { formatIds: [], ud: [], clipId: undefined };
}

export const Pqa: MessageFns<Pqa> = {
  encode(message: Pqa, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.formatIds) {
      FormatId.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.ud) {
      Zpa.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.clipId !== undefined) {
      writer.uint32(26).string(message.clipId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Pqa {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePqa();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.formatIds.push(FormatId.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.ud.push(Zpa.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clipId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Pqa {
    return {
      formatIds: globalThis.Array.isArray(object?.formatIds)
        ? object.formatIds.map((e: any) => FormatId.fromJSON(e))
        : [],
      ud: globalThis.Array.isArray(object?.ud) ? object.ud.map((e: any) => Zpa.fromJSON(e)) : [],
      clipId: isSet(object.clipId) ? globalThis.String(object.clipId) : undefined,
    };
  },

  toJSON(message: Pqa): unknown {
    const obj: any = {};
    if (message.formatIds?.length) {
      obj.formatIds = message.formatIds.map((e) => FormatId.toJSON(e));
    }
    if (message.ud?.length) {
      obj.ud = message.ud.map((e) => Zpa.toJSON(e));
    }
    if (message.clipId !== undefined) {
      obj.clipId = message.clipId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Pqa>, I>>(base?: I): Pqa {
    return Pqa.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Pqa>, I>>(object: I): Pqa {
    const message = createBasePqa();
    message.formatIds = object.formatIds?.map((e) => FormatId.fromPartial(e)) || [];
    message.ud = object.ud?.map((e) => Zpa.fromPartial(e)) || [];
    message.clipId = object.clipId ?? undefined;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  const bin = globalThis.atob(b64);
  const arr = new Uint8Array(bin.length);
  for (let i = 0; i < bin.length; ++i) {
    arr[i] = bin.charCodeAt(i);
  }
  return arr;
}

function base64FromBytes(arr: Uint8Array): string {
  const bin: string[] = [];
  arr.forEach((byte) => {
    bin.push(globalThis.String.fromCharCode(byte));
  });
  return globalThis.btoa(bin.join(""));
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
