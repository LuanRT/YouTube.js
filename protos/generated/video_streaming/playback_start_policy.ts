// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.0
// source: video_streaming/playback_start_policy.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "video_streaming";

export interface PlaybackStartPolicy {
  startMinReadaheadPolicy?: PlaybackStartPolicy_ReadaheadPolicy | undefined;
  resumeMinReadaheadPolicy?: PlaybackStartPolicy_ReadaheadPolicy | undefined;
}

export interface PlaybackStartPolicy_ReadaheadPolicy {
  minReadaheadMs?: number | undefined;
  minBandwidthBytesPerSec?: number | undefined;
}

function createBasePlaybackStartPolicy(): PlaybackStartPolicy {
  return { startMinReadaheadPolicy: undefined, resumeMinReadaheadPolicy: undefined };
}

export const PlaybackStartPolicy: MessageFns<PlaybackStartPolicy> = {
  encode(message: PlaybackStartPolicy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.startMinReadaheadPolicy !== undefined) {
      PlaybackStartPolicy_ReadaheadPolicy.encode(message.startMinReadaheadPolicy, writer.uint32(10).fork()).join();
    }
    if (message.resumeMinReadaheadPolicy !== undefined) {
      PlaybackStartPolicy_ReadaheadPolicy.encode(message.resumeMinReadaheadPolicy, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlaybackStartPolicy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlaybackStartPolicy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.startMinReadaheadPolicy = PlaybackStartPolicy_ReadaheadPolicy.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.resumeMinReadaheadPolicy = PlaybackStartPolicy_ReadaheadPolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlaybackStartPolicy {
    return {
      startMinReadaheadPolicy: isSet(object.startMinReadaheadPolicy)
        ? PlaybackStartPolicy_ReadaheadPolicy.fromJSON(object.startMinReadaheadPolicy)
        : undefined,
      resumeMinReadaheadPolicy: isSet(object.resumeMinReadaheadPolicy)
        ? PlaybackStartPolicy_ReadaheadPolicy.fromJSON(object.resumeMinReadaheadPolicy)
        : undefined,
    };
  },

  toJSON(message: PlaybackStartPolicy): unknown {
    const obj: any = {};
    if (message.startMinReadaheadPolicy !== undefined) {
      obj.startMinReadaheadPolicy = PlaybackStartPolicy_ReadaheadPolicy.toJSON(message.startMinReadaheadPolicy);
    }
    if (message.resumeMinReadaheadPolicy !== undefined) {
      obj.resumeMinReadaheadPolicy = PlaybackStartPolicy_ReadaheadPolicy.toJSON(message.resumeMinReadaheadPolicy);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlaybackStartPolicy>, I>>(base?: I): PlaybackStartPolicy {
    return PlaybackStartPolicy.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlaybackStartPolicy>, I>>(object: I): PlaybackStartPolicy {
    const message = createBasePlaybackStartPolicy();
    message.startMinReadaheadPolicy =
      (object.startMinReadaheadPolicy !== undefined && object.startMinReadaheadPolicy !== null)
        ? PlaybackStartPolicy_ReadaheadPolicy.fromPartial(object.startMinReadaheadPolicy)
        : undefined;
    message.resumeMinReadaheadPolicy =
      (object.resumeMinReadaheadPolicy !== undefined && object.resumeMinReadaheadPolicy !== null)
        ? PlaybackStartPolicy_ReadaheadPolicy.fromPartial(object.resumeMinReadaheadPolicy)
        : undefined;
    return message;
  },
};

function createBasePlaybackStartPolicy_ReadaheadPolicy(): PlaybackStartPolicy_ReadaheadPolicy {
  return { minReadaheadMs: undefined, minBandwidthBytesPerSec: undefined };
}

export const PlaybackStartPolicy_ReadaheadPolicy: MessageFns<PlaybackStartPolicy_ReadaheadPolicy> = {
  encode(message: PlaybackStartPolicy_ReadaheadPolicy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.minReadaheadMs !== undefined) {
      writer.uint32(16).int32(message.minReadaheadMs);
    }
    if (message.minBandwidthBytesPerSec !== undefined) {
      writer.uint32(8).int32(message.minBandwidthBytesPerSec);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlaybackStartPolicy_ReadaheadPolicy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlaybackStartPolicy_ReadaheadPolicy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 16) {
            break;
          }

          message.minReadaheadMs = reader.int32();
          continue;
        case 1:
          if (tag !== 8) {
            break;
          }

          message.minBandwidthBytesPerSec = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlaybackStartPolicy_ReadaheadPolicy {
    return {
      minReadaheadMs: isSet(object.minReadaheadMs) ? globalThis.Number(object.minReadaheadMs) : undefined,
      minBandwidthBytesPerSec: isSet(object.minBandwidthBytesPerSec)
        ? globalThis.Number(object.minBandwidthBytesPerSec)
        : undefined,
    };
  },

  toJSON(message: PlaybackStartPolicy_ReadaheadPolicy): unknown {
    const obj: any = {};
    if (message.minReadaheadMs !== undefined) {
      obj.minReadaheadMs = Math.round(message.minReadaheadMs);
    }
    if (message.minBandwidthBytesPerSec !== undefined) {
      obj.minBandwidthBytesPerSec = Math.round(message.minBandwidthBytesPerSec);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlaybackStartPolicy_ReadaheadPolicy>, I>>(
    base?: I,
  ): PlaybackStartPolicy_ReadaheadPolicy {
    return PlaybackStartPolicy_ReadaheadPolicy.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlaybackStartPolicy_ReadaheadPolicy>, I>>(
    object: I,
  ): PlaybackStartPolicy_ReadaheadPolicy {
    const message = createBasePlaybackStartPolicy_ReadaheadPolicy();
    message.minReadaheadMs = object.minReadaheadMs ?? undefined;
    message.minBandwidthBytesPerSec = object.minBandwidthBytesPerSec ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
