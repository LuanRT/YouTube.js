// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.0
// source: youtube/api/pfiinnertube/capability_info.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "youtube.api.pfiinnertube";

export interface CapabilityInfo {
  profile?: string | undefined;
  supportedCapabilities: InnerTubeCapability[];
  disabledCapabilities: InnerTubeCapability[];
  snapshot?: string | undefined;
}

export interface InnerTubeCapability {
  capability?: number | undefined;
  features?: number | undefined;
  experimentFlags?: string | undefined;
}

function createBaseCapabilityInfo(): CapabilityInfo {
  return { profile: undefined, supportedCapabilities: [], disabledCapabilities: [], snapshot: undefined };
}

export const CapabilityInfo: MessageFns<CapabilityInfo> = {
  encode(message: CapabilityInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.profile !== undefined) {
      writer.uint32(10).string(message.profile);
    }
    for (const v of message.supportedCapabilities) {
      InnerTubeCapability.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.disabledCapabilities) {
      InnerTubeCapability.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.snapshot !== undefined) {
      writer.uint32(42).string(message.snapshot);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CapabilityInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCapabilityInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.profile = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.supportedCapabilities.push(InnerTubeCapability.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.disabledCapabilities.push(InnerTubeCapability.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.snapshot = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CapabilityInfo {
    return {
      profile: isSet(object.profile) ? globalThis.String(object.profile) : undefined,
      supportedCapabilities: globalThis.Array.isArray(object?.supportedCapabilities)
        ? object.supportedCapabilities.map((e: any) => InnerTubeCapability.fromJSON(e))
        : [],
      disabledCapabilities: globalThis.Array.isArray(object?.disabledCapabilities)
        ? object.disabledCapabilities.map((e: any) => InnerTubeCapability.fromJSON(e))
        : [],
      snapshot: isSet(object.snapshot) ? globalThis.String(object.snapshot) : undefined,
    };
  },

  toJSON(message: CapabilityInfo): unknown {
    const obj: any = {};
    if (message.profile !== undefined) {
      obj.profile = message.profile;
    }
    if (message.supportedCapabilities?.length) {
      obj.supportedCapabilities = message.supportedCapabilities.map((e) => InnerTubeCapability.toJSON(e));
    }
    if (message.disabledCapabilities?.length) {
      obj.disabledCapabilities = message.disabledCapabilities.map((e) => InnerTubeCapability.toJSON(e));
    }
    if (message.snapshot !== undefined) {
      obj.snapshot = message.snapshot;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CapabilityInfo>, I>>(base?: I): CapabilityInfo {
    return CapabilityInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CapabilityInfo>, I>>(object: I): CapabilityInfo {
    const message = createBaseCapabilityInfo();
    message.profile = object.profile ?? undefined;
    message.supportedCapabilities = object.supportedCapabilities?.map((e) => InnerTubeCapability.fromPartial(e)) || [];
    message.disabledCapabilities = object.disabledCapabilities?.map((e) => InnerTubeCapability.fromPartial(e)) || [];
    message.snapshot = object.snapshot ?? undefined;
    return message;
  },
};

function createBaseInnerTubeCapability(): InnerTubeCapability {
  return { capability: undefined, features: undefined, experimentFlags: undefined };
}

export const InnerTubeCapability: MessageFns<InnerTubeCapability> = {
  encode(message: InnerTubeCapability, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.capability !== undefined) {
      writer.uint32(8).uint32(message.capability);
    }
    if (message.features !== undefined) {
      writer.uint32(16).uint32(message.features);
    }
    if (message.experimentFlags !== undefined) {
      writer.uint32(50).string(message.experimentFlags);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InnerTubeCapability {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInnerTubeCapability();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.capability = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.features = reader.uint32();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.experimentFlags = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InnerTubeCapability {
    return {
      capability: isSet(object.capability) ? globalThis.Number(object.capability) : undefined,
      features: isSet(object.features) ? globalThis.Number(object.features) : undefined,
      experimentFlags: isSet(object.experimentFlags) ? globalThis.String(object.experimentFlags) : undefined,
    };
  },

  toJSON(message: InnerTubeCapability): unknown {
    const obj: any = {};
    if (message.capability !== undefined) {
      obj.capability = Math.round(message.capability);
    }
    if (message.features !== undefined) {
      obj.features = Math.round(message.features);
    }
    if (message.experimentFlags !== undefined) {
      obj.experimentFlags = message.experimentFlags;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InnerTubeCapability>, I>>(base?: I): InnerTubeCapability {
    return InnerTubeCapability.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InnerTubeCapability>, I>>(object: I): InnerTubeCapability {
    const message = createBaseInnerTubeCapability();
    message.capability = object.capability ?? undefined;
    message.features = object.features ?? undefined;
    message.experimentFlags = object.experimentFlags ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
