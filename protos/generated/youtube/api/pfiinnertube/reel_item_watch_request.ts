// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.0
// source: youtube/api/pfiinnertube/reel_item_watch_request.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { InnerTubeContext } from "./innertube_context.js";
import { PlayerRequest } from "./player_request.js";

export const protobufPackage = "youtube.api.pfiinnertube";

export interface ReelItemWatchRequest {
  context?: InnerTubeContext | undefined;
  playerRequest?: PlayerRequest | undefined;
  params?: string | undefined;
  disablePlayerResponse?: boolean | undefined;
}

function createBaseReelItemWatchRequest(): ReelItemWatchRequest {
  return { context: undefined, playerRequest: undefined, params: undefined, disablePlayerResponse: undefined };
}

export const ReelItemWatchRequest: MessageFns<ReelItemWatchRequest> = {
  encode(message: ReelItemWatchRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      InnerTubeContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.playerRequest !== undefined) {
      PlayerRequest.encode(message.playerRequest, writer.uint32(18).fork()).join();
    }
    if (message.params !== undefined) {
      writer.uint32(26).string(message.params);
    }
    if (message.disablePlayerResponse !== undefined) {
      writer.uint32(32).bool(message.disablePlayerResponse);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReelItemWatchRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReelItemWatchRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = InnerTubeContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.playerRequest = PlayerRequest.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.params = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.disablePlayerResponse = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReelItemWatchRequest {
    return {
      context: isSet(object.context) ? InnerTubeContext.fromJSON(object.context) : undefined,
      playerRequest: isSet(object.playerRequest) ? PlayerRequest.fromJSON(object.playerRequest) : undefined,
      params: isSet(object.params) ? globalThis.String(object.params) : undefined,
      disablePlayerResponse: isSet(object.disablePlayerResponse)
        ? globalThis.Boolean(object.disablePlayerResponse)
        : undefined,
    };
  },

  toJSON(message: ReelItemWatchRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = InnerTubeContext.toJSON(message.context);
    }
    if (message.playerRequest !== undefined) {
      obj.playerRequest = PlayerRequest.toJSON(message.playerRequest);
    }
    if (message.params !== undefined) {
      obj.params = message.params;
    }
    if (message.disablePlayerResponse !== undefined) {
      obj.disablePlayerResponse = message.disablePlayerResponse;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReelItemWatchRequest>, I>>(base?: I): ReelItemWatchRequest {
    return ReelItemWatchRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReelItemWatchRequest>, I>>(object: I): ReelItemWatchRequest {
    const message = createBaseReelItemWatchRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? InnerTubeContext.fromPartial(object.context)
      : undefined;
    message.playerRequest = (object.playerRequest !== undefined && object.playerRequest !== null)
      ? PlayerRequest.fromPartial(object.playerRequest)
      : undefined;
    message.params = object.params ?? undefined;
    message.disablePlayerResponse = object.disablePlayerResponse ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
