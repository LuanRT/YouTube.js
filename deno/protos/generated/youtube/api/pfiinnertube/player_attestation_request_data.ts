// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.0
// source: youtube/api/pfiinnertube/player_attestation_request_data.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "youtube.api.pfiinnertube";

export interface PlayerAttestationRequestData {
  iosguardRequest?: PlayerAttestationRequestData_IosguardChallengeRequestData | undefined;
  omitBotguardData?: boolean | undefined;
}

export interface PlayerAttestationRequestData_IosguardChallengeRequestData {
  challengeRequest?: Uint8Array | undefined;
}

function createBasePlayerAttestationRequestData(): PlayerAttestationRequestData {
  return { iosguardRequest: undefined, omitBotguardData: undefined };
}

export const PlayerAttestationRequestData: MessageFns<PlayerAttestationRequestData> = {
  encode(message: PlayerAttestationRequestData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.iosguardRequest !== undefined) {
      PlayerAttestationRequestData_IosguardChallengeRequestData.encode(
        message.iosguardRequest,
        writer.uint32(10).fork(),
      ).join();
    }
    if (message.omitBotguardData !== undefined) {
      writer.uint32(16).bool(message.omitBotguardData);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlayerAttestationRequestData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerAttestationRequestData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.iosguardRequest = PlayerAttestationRequestData_IosguardChallengeRequestData.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.omitBotguardData = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerAttestationRequestData {
    return {
      iosguardRequest: isSet(object.iosguardRequest)
        ? PlayerAttestationRequestData_IosguardChallengeRequestData.fromJSON(object.iosguardRequest)
        : undefined,
      omitBotguardData: isSet(object.omitBotguardData) ? globalThis.Boolean(object.omitBotguardData) : undefined,
    };
  },

  toJSON(message: PlayerAttestationRequestData): unknown {
    const obj: any = {};
    if (message.iosguardRequest !== undefined) {
      obj.iosguardRequest = PlayerAttestationRequestData_IosguardChallengeRequestData.toJSON(message.iosguardRequest);
    }
    if (message.omitBotguardData !== undefined) {
      obj.omitBotguardData = message.omitBotguardData;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerAttestationRequestData>, I>>(base?: I): PlayerAttestationRequestData {
    return PlayerAttestationRequestData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlayerAttestationRequestData>, I>>(object: I): PlayerAttestationRequestData {
    const message = createBasePlayerAttestationRequestData();
    message.iosguardRequest = (object.iosguardRequest !== undefined && object.iosguardRequest !== null)
      ? PlayerAttestationRequestData_IosguardChallengeRequestData.fromPartial(object.iosguardRequest)
      : undefined;
    message.omitBotguardData = object.omitBotguardData ?? undefined;
    return message;
  },
};

function createBasePlayerAttestationRequestData_IosguardChallengeRequestData(): PlayerAttestationRequestData_IosguardChallengeRequestData {
  return { challengeRequest: undefined };
}

export const PlayerAttestationRequestData_IosguardChallengeRequestData: MessageFns<
  PlayerAttestationRequestData_IosguardChallengeRequestData
> = {
  encode(
    message: PlayerAttestationRequestData_IosguardChallengeRequestData,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.challengeRequest !== undefined) {
      writer.uint32(10).bytes(message.challengeRequest);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlayerAttestationRequestData_IosguardChallengeRequestData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerAttestationRequestData_IosguardChallengeRequestData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.challengeRequest = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerAttestationRequestData_IosguardChallengeRequestData {
    return { challengeRequest: isSet(object.challengeRequest) ? bytesFromBase64(object.challengeRequest) : undefined };
  },

  toJSON(message: PlayerAttestationRequestData_IosguardChallengeRequestData): unknown {
    const obj: any = {};
    if (message.challengeRequest !== undefined) {
      obj.challengeRequest = base64FromBytes(message.challengeRequest);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerAttestationRequestData_IosguardChallengeRequestData>, I>>(
    base?: I,
  ): PlayerAttestationRequestData_IosguardChallengeRequestData {
    return PlayerAttestationRequestData_IosguardChallengeRequestData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlayerAttestationRequestData_IosguardChallengeRequestData>, I>>(
    object: I,
  ): PlayerAttestationRequestData_IosguardChallengeRequestData {
    const message = createBasePlayerAttestationRequestData_IosguardChallengeRequestData();
    message.challengeRequest = object.challengeRequest ?? undefined;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  const bin = globalThis.atob(b64);
  const arr = new Uint8Array(bin.length);
  for (let i = 0; i < bin.length; ++i) {
    arr[i] = bin.charCodeAt(i);
  }
  return arr;
}

function base64FromBytes(arr: Uint8Array): string {
  const bin: string[] = [];
  arr.forEach((byte) => {
    bin.push(globalThis.String.fromCharCode(byte));
  });
  return globalThis.btoa(bin.join(""));
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
