plugins:
  [ '@typescript-eslint', 'eslint-plugin-tsdoc' ]
env:
  commonjs: true
  es2021: true
  node: true
extends: [ eslint:recommended, 'plugin:@typescript-eslint/recommended' ]
parser: '@typescript-eslint/parser'
parserOptions:
  ecmaVersion: latest
rules:
  max-len:
    - error
    -
      code: 200
      ignoreComments: true
      ignoreTrailingComments: true
      ignoreStrings: true
      ignoreTemplateLiterals: true
      ignoreRegExpLiterals: true

  quotes: [error, single] 

  '@typescript-eslint/ban-types': 'off'
  'tsdoc/syntax': 'warn'

  no-template-curly-in-string: error
  no-unreachable-loop: error
  no-unused-private-class-members: 'off'
  no-prototype-builtins: 'off'
  no-async-promise-executor: 'off'
  no-case-declarations: 'off'
  no-return-assign: 'off'
  no-floating-decimal: error
  no-implied-eval: error
  arrow-spacing: error
  no-invalid-this: error
  no-lone-blocks: warn
  no-new-func: error
  no-new-wrappers: error
  no-new: error
  no-void: error
  no-octal-escape: error
  no-self-compare: error
  no-sequences: error
  no-throw-literal: error
  no-unmodified-loop-condition: error
  no-useless-call: error
  no-useless-concat: error
  no-useless-escape: error
  no-useless-return: error
  no-else-return: error
  no-lonely-if: error
  no-undef-init: error
  no-unneeded-ternary: error
  no-var: error
  no-multi-spaces: error
  no-multiple-empty-lines: ["error", { "max": 2, "maxEOF": 0 }]
  no-tabs: error
  no-trailing-spaces: error
 
  brace-style: error
  new-parens: error
  space-infix-ops: error
  template-curly-spacing: error
  wrap-regex: error
  capitalized-comments: error
  prefer-template: error

  keyword-spacing: ["error", { "before": true } ]
  array-bracket-spacing: ["error", "always"]
  arrow-parens: ["error", "always"]
  comma-dangle: ["error", "never"]
  comma-spacing: ["error", { "before": false, "after": true }]
  computed-property-spacing: ["error", "never"]
  func-call-spacing: ["error", "never"]
  indent: ["error", 2, { "SwitchCase": 1 }]
  key-spacing: ["error", { "beforeColon": false }]
  semi: ["error", "always"]
  operator-assignment: ["error", "always"]